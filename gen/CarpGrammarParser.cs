//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/melod/source/csharp/Carp/CarpGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CarpGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ELIPSIS=1, PERIOD=2, COMMA=3, LPAREN=4, RPAREN=5, LBRACE=6, RBRACE=7, 
		LBRACKET=8, RBRACKET=9, EQUALS=10, EQUALS_EQUALS=11, NOT_EQUALS=12, GREATER_THAN=13, 
		LESS_THAN=14, LESS_THAN_EQUALS=15, GREATER_THAN_EQUALS=16, PIPE=17, AMPERSAND=18, 
		TILDE=19, AT=20, BANG=21, PLUS_EQUALS=22, MINUS_EQUALS=23, ASTERISK_EQUALS=24, 
		SLASH_EQUALS=25, CARET_EQUALS=26, PERCENT_EQUALS=27, PLUS_PLUS=28, MINUS_MINUS=29, 
		PLUS=30, MINUS=31, SLASH=32, PERCENT=33, ASTERISK_BSPACE=34, ASTERISK_LSPACE=35, 
		ASTERISK_RSPACE=36, ASTERISK_NSPC=37, BACKSLASH=38, CARET=39, QUESTION_MARK=40, 
		UNDERSCORE=41, COLON=42, SEMICOLON=43, COLON_COLON=44, SEMICOLON_SEMICOLON=45, 
		ARROW=46, HASH=47, TRUE=48, FALSE=49, NULL=50, TRY=51, CATCH=52, FINALLY=53, 
		IF=54, ELSE=55, ELSE_IF=56, WHILE=57, ITER=58, RETURN=59, BREAK=60, CONTINUE=61, 
		YIELD=62, CLASS=63, STRUCT=64, LET=65, IMPORT=66, ID=67, INT=68, WS=69, 
		COMMENT=70, STRING=71, PATH=72;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_generic_block = 2, RULE_path_part = 3, 
		RULE_path = 4, RULE_statement = 5, RULE_flow_control = 6, RULE_if_statement = 7, 
		RULE_while_statement = 8, RULE_try_statement = 9, RULE_iter_statement = 10, 
		RULE_return_statement = 11, RULE_break_statement = 12, RULE_continue_statement = 13, 
		RULE_yield_statement = 14, RULE_attribute = 15, RULE_definition_with_attr = 16, 
		RULE_definition = 17, RULE_expression = 18, RULE_expression_list = 19, 
		RULE_compoundAssignment = 20, RULE_constant = 21, RULE_unary = 22, RULE_logical = 23, 
		RULE_comparison = 24, RULE_binary = 25, RULE_array = 26, RULE_map = 27, 
		RULE_modifier = 28, RULE_type = 29, RULE_type_name_list = 30, RULE_name = 31;
	public static readonly string[] ruleNames = {
		"program", "block", "generic_block", "path_part", "path", "statement", 
		"flow_control", "if_statement", "while_statement", "try_statement", "iter_statement", 
		"return_statement", "break_statement", "continue_statement", "yield_statement", 
		"attribute", "definition_with_attr", "definition", "expression", "expression_list", 
		"compoundAssignment", "constant", "unary", "logical", "comparison", "binary", 
		"array", "map", "modifier", "type", "type_name_list", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'..'", "'.'", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'='", "'=='", null, "'>'", "'<'", "'<='", "'>='", "'|'", "'&'", "'~'", 
		"'@'", "'!'", "'+='", "'-='", "'*='", "'/='", "'^='", "'%='", "'++'", 
		"'--'", "'+'", "'-'", "'/'", "'%'", "' * '", "' *'", "'* '", "'*'", "'\\'", 
		"'^'", "'?'", "'_'", "':'", "';'", "'::'", "';;'", "'->'", "'#'", "'true'", 
		"'false'", "'null'", "'try'", "'catch'", "'finally'", "'if'", "'else'", 
		"'else if'", "'while'", "'for'", "'return'", "'break'", "'continue'", 
		"'yield'", "'class'", "'struct'", "'let'", "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ELIPSIS", "PERIOD", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACKET", "RBRACKET", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", "GREATER_THAN", 
		"LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "PIPE", "AMPERSAND", 
		"TILDE", "AT", "BANG", "PLUS_EQUALS", "MINUS_EQUALS", "ASTERISK_EQUALS", 
		"SLASH_EQUALS", "CARET_EQUALS", "PERCENT_EQUALS", "PLUS_PLUS", "MINUS_MINUS", 
		"PLUS", "MINUS", "SLASH", "PERCENT", "ASTERISK_BSPACE", "ASTERISK_LSPACE", 
		"ASTERISK_RSPACE", "ASTERISK_NSPC", "BACKSLASH", "CARET", "QUESTION_MARK", 
		"UNDERSCORE", "COLON", "SEMICOLON", "COLON_COLON", "SEMICOLON_SEMICOLON", 
		"ARROW", "HASH", "TRUE", "FALSE", "NULL", "TRY", "CATCH", "FINALLY", "IF", 
		"ELSE", "ELSE_IF", "WHILE", "ITER", "RETURN", "BREAK", "CONTINUE", "YIELD", 
		"CLASS", "STRUCT", "LET", "IMPORT", "ID", "INT", "WS", "COMMENT", "STRING", 
		"PATH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CarpGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CarpGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CarpGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CarpGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : Carp.interpreter.ScopedParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CarpGrammarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -121876462936522478L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 159L) != 0)) {
				{
				{
				State = 64;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : Carp.interpreter.ScopedParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -121876462936522478L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 159L) != 0)) {
				{
				{
				State = 72;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_blockContext : Carp.interpreter.ScopedParserRuleContext {
		public Generic_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_block; } }
	 
		public Generic_blockContext() { }
		public virtual void CopyFrom(Generic_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(CarpGrammarParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LambdaBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(CarpGrammarParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpressionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnclosedBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		public EnclosedBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnclosedBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_blockContext generic_block() {
		Generic_blockContext _localctx = new Generic_blockContext(Context, State);
		EnterRule(_localctx, 4, RULE_generic_block);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new EnclosedBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				Match(LBRACE);
				State = 79;
				block();
				State = 80;
				Match(RBRACE);
				}
				break;
			case 2:
				_localctx = new LambdaExpressionBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				Match(ARROW);
				State = 83;
				expression(0);
				}
				break;
			case 3:
				_localctx = new LambdaBlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				Match(ARROW);
				State = 85;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_partContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(CarpGrammarParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CarpGrammarParser.STRING, 0); }
		public Path_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_partContext path_part() {
		Path_partContext _localctx = new Path_partContext(Context, State);
		EnterRule(_localctx, 6, RULE_path_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==PATH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : Carp.interpreter.ScopedParserRuleContext {
		public Path_partContext _path_part;
		public IList<Path_partContext> _parts = new List<Path_partContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Path_partContext[] path_part() {
			return GetRuleContexts<Path_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_partContext path_part(int i) {
			return GetRuleContext<Path_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERIOD() { return GetTokens(CarpGrammarParser.PERIOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD(int i) {
			return GetToken(CarpGrammarParser.PERIOD, i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 8, RULE_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_localctx._path_part = path_part();
			_localctx._parts.Add(_localctx._path_part);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 91;
				Match(PERIOD);
				State = 92;
				_localctx._path_part = path_part();
				_localctx._parts.Add(_localctx._path_part);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : Carp.interpreter.ScopedParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImportStatementContext : StatementContext {
		public PathContext loc;
		public Path_partContext ver;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(CarpGrammarParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_partContext path_part() {
			return GetRuleContext<Path_partContext>(0);
		}
		public ImportStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Definition_with_attrContext definition_with_attr() {
			return GetRuleContext<Definition_with_attrContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlowControlStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flow_controlContext flow_control() {
			return GetRuleContext<Flow_controlContext>(0);
		}
		public FlowControlStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ImportStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				Match(IMPORT);
				State = 99;
				((ImportStatementContext)_localctx).loc = path();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 100;
					Match(COLON);
					State = 101;
					((ImportStatementContext)_localctx).ver = path_part();
					}
				}

				}
				break;
			case 2:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				definition_with_attr();
				}
				break;
			case 3:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				expression(0);
				}
				break;
			case 4:
				_localctx = new FlowControlStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				flow_control();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_controlContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iter_statementContext iter_statement() {
			return GetRuleContext<Iter_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_statementContext yield_statement() {
			return GetRuleContext<Yield_statementContext>(0);
		}
		public Flow_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlow_control(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flow_controlContext flow_control() {
		Flow_controlContext _localctx = new Flow_controlContext(Context, State);
		EnterRule(_localctx, 12, RULE_flow_control);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				if_statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				while_statement();
				}
				break;
			case ITER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				iter_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				return_statement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 113;
				try_statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 114;
				break_statement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 115;
				continue_statement();
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 116;
				yield_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext cond;
		public Generic_blockContext body;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _elif_expressions = new List<ExpressionContext>();
		public Generic_blockContext _generic_block;
		public IList<Generic_blockContext> _elif_blocks = new List<Generic_blockContext>();
		public Generic_blockContext else_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CarpGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext[] generic_block() {
			return GetRuleContexts<Generic_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block(int i) {
			return GetRuleContext<Generic_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE_IF() { return GetTokens(CarpGrammarParser.ELSE_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF(int i) {
			return GetToken(CarpGrammarParser.ELSE_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CarpGrammarParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(IF);
			State = 120;
			_localctx.cond = expression(0);
			State = 121;
			_localctx.body = generic_block();
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 122;
					Match(ELSE_IF);
					State = 123;
					_localctx._expression = expression(0);
					_localctx._elif_expressions.Add(_localctx._expression);
					State = 124;
					_localctx._generic_block = generic_block();
					_localctx._elif_blocks.Add(_localctx._generic_block);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 131;
				Match(ELSE);
				State = 132;
				_localctx.else_block = generic_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext cond;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CarpGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(WHILE);
			State = 136;
			_localctx.cond = expression(0);
			State = 137;
			_localctx.body = generic_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public Generic_blockContext try_block;
		public TypeContext _type;
		public IList<TypeContext> _catch_types = new List<TypeContext>();
		public NameContext _name;
		public IList<NameContext> _catch_names = new List<NameContext>();
		public Generic_blockContext _generic_block;
		public IList<Generic_blockContext> _catch_blocks = new List<Generic_blockContext>();
		public Generic_blockContext finally_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CarpGrammarParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext[] generic_block() {
			return GetRuleContexts<Generic_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block(int i) {
			return GetRuleContext<Generic_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(CarpGrammarParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(CarpGrammarParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(CarpGrammarParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(CarpGrammarParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(CarpGrammarParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(CarpGrammarParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CarpGrammarParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_try_statement);
		try {
			int _alt;
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				Match(TRY);
				State = 140;
				_localctx.try_block = generic_block();
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 141;
						Match(CATCH);
						State = 142;
						Match(LPAREN);
						State = 143;
						_localctx._type = type(0);
						_localctx._catch_types.Add(_localctx._type);
						State = 144;
						_localctx._name = name();
						_localctx._catch_names.Add(_localctx._name);
						State = 145;
						Match(RPAREN);
						State = 146;
						_localctx._generic_block = generic_block();
						_localctx._catch_blocks.Add(_localctx._generic_block);
						}
						} 
					}
					State = 152;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 155;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 153;
					Match(FINALLY);
					State = 154;
					_localctx.finally_block = generic_block();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(TRY);
				State = 158;
				_localctx.try_block = generic_block();
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 159;
						Match(CATCH);
						State = 160;
						_localctx._type = type(0);
						_localctx._catch_types.Add(_localctx._type);
						State = 161;
						_localctx._name = name();
						_localctx._catch_names.Add(_localctx._name);
						State = 162;
						_localctx._generic_block = generic_block();
						_localctx._catch_blocks.Add(_localctx._generic_block);
						}
						} 
					}
					State = 168;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 169;
					Match(FINALLY);
					State = 170;
					_localctx.finally_block = generic_block();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iter_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public Iter_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iter_statement; } }
	 
		public Iter_statementContext() { }
		public virtual void CopyFrom(Iter_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IterStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public IterStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IterAsUnpackedStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		public IterAsUnpackedStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterAsUnpackedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IterAsStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		public IterAsStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterAsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iter_statementContext iter_statement() {
		Iter_statementContext _localctx = new Iter_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_iter_statement);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new IterStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(ITER);
				State = 176;
				((IterStatementContext)_localctx).iter = expression(0);
				State = 177;
				((IterStatementContext)_localctx).body = generic_block();
				}
				break;
			case 2:
				_localctx = new IterAsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				Match(ITER);
				State = 180;
				type(0);
				State = 181;
				name();
				State = 182;
				Match(COLON);
				State = 183;
				((IterAsStatementContext)_localctx).iter = expression(0);
				State = 184;
				((IterAsStatementContext)_localctx).body = generic_block();
				}
				break;
			case 3:
				_localctx = new IterAsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(ITER);
				State = 187;
				Match(LPAREN);
				State = 188;
				type(0);
				State = 189;
				name();
				State = 190;
				Match(COLON);
				State = 191;
				((IterAsStatementContext)_localctx).iter = expression(0);
				State = 192;
				Match(RPAREN);
				State = 193;
				((IterAsStatementContext)_localctx).body = generic_block();
				}
				break;
			case 4:
				_localctx = new IterAsUnpackedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 195;
				Match(ITER);
				State = 196;
				type_name_list();
				State = 197;
				Match(COLON);
				State = 198;
				((IterAsUnpackedStatementContext)_localctx).iter = expression(0);
				State = 199;
				((IterAsUnpackedStatementContext)_localctx).body = generic_block();
				}
				break;
			case 5:
				_localctx = new IterAsUnpackedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 201;
				Match(ITER);
				State = 202;
				Match(LPAREN);
				State = 203;
				type_name_list();
				State = 204;
				Match(COLON);
				State = 205;
				((IterAsUnpackedStatementContext)_localctx).iter = expression(0);
				State = 206;
				Match(RPAREN);
				State = 207;
				((IterAsUnpackedStatementContext)_localctx).body = generic_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CarpGrammarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(RETURN);
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 212;
				_localctx.value = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CarpGrammarParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CarpGrammarParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CarpGrammarParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Yield_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_statementContext yield_statement() {
		Yield_statementContext _localctx = new Yield_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_yield_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(YIELD);
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 220;
				_localctx.value = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext obj;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(CarpGrammarParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 30, RULE_attribute);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(AT);
				State = 224;
				_localctx.obj = expression(0);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(LBRACKET);
				State = 226;
				_localctx.obj = expression(0);
				State = 227;
				Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_with_attrContext : Carp.interpreter.ScopedParserRuleContext {
		public AttributeContext _attribute;
		public IList<AttributeContext> _attrs = new List<AttributeContext>();
		public DefinitionContext def;
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Definition_with_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_with_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_with_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_with_attrContext definition_with_attr() {
		Definition_with_attrContext _localctx = new Definition_with_attrContext(Context, State);
		EnterRule(_localctx, 32, RULE_definition_with_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET || _la==AT) {
				{
				{
				State = 231;
				_localctx._attribute = attribute();
				_localctx._attrs.Add(_localctx._attribute);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			_localctx.def = definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : Carp.interpreter.ScopedParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	 
		public DefinitionContext() { }
		public virtual void CopyFrom(DefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyFunctionDefinitionContext : DefinitionContext {
		public TypeContext rtype;
		public Type_name_listContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		public EmptyFunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionContext : DefinitionContext {
		public TypeContext rtype;
		public Type_name_listContext @values;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public FunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializedVariableDefinitionContext : DefinitionContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CarpGrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializedVariableDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializedVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDefinitionContext : DefinitionContext {
		public Definition_with_attrContext _definition_with_attr;
		public IList<Definition_with_attrContext> _definitions = new List<Definition_with_attrContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CarpGrammarParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Definition_with_attrContext[] definition_with_attr() {
			return GetRuleContexts<Definition_with_attrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_with_attrContext definition_with_attr(int i) {
			return GetRuleContext<Definition_with_attrContext>(i);
		}
		public ClassDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDefinitionContext : DefinitionContext {
		public Definition_with_attrContext _definition_with_attr;
		public IList<Definition_with_attrContext> _definitions = new List<Definition_with_attrContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CarpGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Definition_with_attrContext[] definition_with_attr() {
			return GetRuleContexts<Definition_with_attrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Definition_with_attrContext definition_with_attr(int i) {
			return GetRuleContext<Definition_with_attrContext>(i);
		}
		public StructDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_definition);
		int _la;
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new InitializedVariableDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				type(0);
				State = 240;
				name();
				State = 241;
				Match(EQUALS);
				State = 242;
				((InitializedVariableDefinitionContext)_localctx).value = expression(0);
				}
				break;
			case 2:
				_localctx = new VariableDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				type(0);
				State = 245;
				name();
				}
				break;
			case 3:
				_localctx = new FunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 247;
				((FunctionDefinitionContext)_localctx).rtype = type(0);
				State = 248;
				name();
				State = 249;
				Match(LPAREN);
				State = 250;
				((FunctionDefinitionContext)_localctx).@values = type_name_list();
				State = 251;
				Match(RPAREN);
				State = 252;
				((FunctionDefinitionContext)_localctx).body = generic_block();
				}
				break;
			case 4:
				_localctx = new EmptyFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 254;
				((EmptyFunctionDefinitionContext)_localctx).rtype = type(0);
				State = 255;
				name();
				State = 256;
				Match(LPAREN);
				State = 257;
				((EmptyFunctionDefinitionContext)_localctx).@values = type_name_list();
				State = 258;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new ClassDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 260;
				Match(CLASS);
				State = 261;
				name();
				State = 262;
				Match(LBRACE);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & 828662331436175361L) != 0)) {
					{
					{
					State = 263;
					((ClassDefinitionContext)_localctx)._definition_with_attr = definition_with_attr();
					((ClassDefinitionContext)_localctx)._definitions.Add(((ClassDefinitionContext)_localctx)._definition_with_attr);
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 269;
				Match(RBRACE);
				}
				break;
			case 6:
				_localctx = new StructDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 271;
				Match(STRUCT);
				State = 272;
				name();
				State = 273;
				Match(LBRACE);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & 828662331436175361L) != 0)) {
					{
					{
					State = 274;
					((StructDefinitionContext)_localctx)._definition_with_attr = definition_with_attr();
					((StructDefinitionContext)_localctx)._definitions.Add(((StructDefinitionContext)_localctx)._definition_with_attr);
					}
					}
					State = 279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 280;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		public MapExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CarpGrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparisonContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public LogicalContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalContext logical() {
			return GetRuleContext<LogicalContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WindExpressionContext : ExpressionContext {
		public ExpressionContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_COLON() { return GetToken(CarpGrammarParser.COLON_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WindExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BinaryContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public TypeContext dest;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(CarpGrammarParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public Expression_listContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpressionContext : ExpressionContext {
		public IToken token;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(CarpGrammarParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(CarpGrammarParser.MINUS_MINUS, 0); }
		public InfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundAssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public CompoundAssignmentContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		public CompoundAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExpressionContext : ExpressionContext {
		public ExpressionContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SEMICOLON() { return GetToken(CarpGrammarParser.SEMICOLON_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FilterExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSIS() { return GetToken(CarpGrammarParser.ELIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public Expression_listContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public IndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public UnaryContext op;
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(CarpGrammarParser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken token;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(CarpGrammarParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(CarpGrammarParser.MINUS_MINUS, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public NameContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(CarpGrammarParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PropertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EndRangeExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSIS() { return GetToken(CarpGrammarParser.ELIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 285;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new InfixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 286;
				((InfixExpressionContext)_localctx).token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
					((InfixExpressionContext)_localctx).token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 287;
				((InfixExpressionContext)_localctx).expr = expression(20);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				((UnaryExpressionContext)_localctx).op = unary();
				State = 289;
				((UnaryExpressionContext)_localctx).left = expression(14);
				}
				break;
			case 4:
				{
				_localctx = new MapExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291;
				map();
				}
				break;
			case 5:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292;
				array();
				}
				break;
			case 6:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				name();
				}
				break;
			case 7:
				{
				_localctx = new EndRangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				Match(ELIPSIS);
				State = 295;
				((EndRangeExpressionContext)_localctx).right = expression(6);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 296;
				Match(LPAREN);
				State = 297;
				((ParenthesizedExpressionContext)_localctx).obj = expression(0);
				State = 298;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 352;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 302;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 303;
						((BinaryExpressionContext)_localctx).op = binary();
						State = 304;
						((BinaryExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 307;
						((ComparisonExpressionContext)_localctx).op = comparison();
						State = 308;
						((ComparisonExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 311;
						((LogicalExpressionContext)_localctx).op = logical();
						State = 312;
						((LogicalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 314;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 315;
						Match(QUESTION_MARK);
						State = 316;
						((TernaryExpressionContext)_localctx).left = expression(0);
						State = 317;
						Match(COLON);
						State = 318;
						((TernaryExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 5:
						{
						_localctx = new RangeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RangeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 320;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 321;
						Match(ELIPSIS);
						State = 322;
						((RangeExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 323;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 324;
						Match(EQUALS);
						State = 325;
						((AssignmentExpressionContext)_localctx).right = expression(3);
						}
						break;
					case 7:
						{
						_localctx = new CompoundAssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CompoundAssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327;
						((CompoundAssignmentExpressionContext)_localctx).op = compoundAssignment();
						State = 328;
						((CompoundAssignmentExpressionContext)_localctx).right = expression(2);
						}
						break;
					case 8:
						{
						_localctx = new CastExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CastExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 330;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 331;
						Match(TILDE);
						State = 332;
						((CastExpressionContext)_localctx).dest = type(0);
						}
						break;
					case 9:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 333;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 334;
						((PostfixExpressionContext)_localctx).token = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
							((PostfixExpressionContext)_localctx).token = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 10:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 335;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 336;
						Match(LPAREN);
						State = 337;
						((CallExpressionContext)_localctx).parameters = expression_list();
						State = 338;
						Match(RPAREN);
						}
						break;
					case 11:
						{
						_localctx = new IndexExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IndexExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 341;
						Match(LBRACKET);
						State = 342;
						((IndexExpressionContext)_localctx).parameters = expression_list();
						State = 343;
						Match(RBRACKET);
						}
						break;
					case 12:
						{
						_localctx = new PropertyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PropertyExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 345;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 346;
						Match(PERIOD);
						State = 347;
						((PropertyExpressionContext)_localctx).value = name();
						}
						break;
					case 13:
						{
						_localctx = new WindExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((WindExpressionContext)_localctx).inner = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 348;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 349;
						Match(COLON_COLON);
						}
						break;
					case 14:
						{
						_localctx = new FilterExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FilterExpressionContext)_localctx).inner = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 350;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 351;
						Match(SEMICOLON_SEMICOLON);
						}
						break;
					}
					} 
				}
				State = 356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_listContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1972526815117586L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 19L) != 0)) {
				{
				State = 357;
				_localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 358;
					Match(COMMA);
					State = 359;
					_localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentContext : Carp.interpreter.ScopedParserRuleContext {
		public CompoundAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignment; } }
	 
		public CompoundAssignmentContext() { }
		public virtual void CopyFrom(CompoundAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ModulusCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_EQUALS() { return GetToken(CarpGrammarParser.PERCENT_EQUALS, 0); }
		public ModulusCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulusCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH_EQUALS() { return GetToken(CarpGrammarParser.SLASH_EQUALS, 0); }
		public DivideCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_EQUALS() { return GetToken(CarpGrammarParser.PLUS_EQUALS, 0); }
		public AddCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_EQUALS() { return GetToken(CarpGrammarParser.ASTERISK_EQUALS, 0); }
		public MultiplyCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET_EQUALS() { return GetToken(CarpGrammarParser.CARET_EQUALS, 0); }
		public PowerCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_EQUALS() { return GetToken(CarpGrammarParser.MINUS_EQUALS, 0); }
		public SubtractCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentContext compoundAssignment() {
		CompoundAssignmentContext _localctx = new CompoundAssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_compoundAssignment);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS_EQUALS:
				_localctx = new AddCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 367;
				Match(PLUS_EQUALS);
				}
				break;
			case MINUS_EQUALS:
				_localctx = new SubtractCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(MINUS_EQUALS);
				}
				break;
			case ASTERISK_EQUALS:
				_localctx = new MultiplyCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 369;
				Match(ASTERISK_EQUALS);
				}
				break;
			case SLASH_EQUALS:
				_localctx = new DivideCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 370;
				Match(SLASH_EQUALS);
				}
				break;
			case CARET_EQUALS:
				_localctx = new PowerCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 371;
				Match(CARET_EQUALS);
				}
				break;
			case PERCENT_EQUALS:
				_localctx = new ModulusCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 372;
				Match(PERCENT_EQUALS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : Carp.interpreter.ScopedParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CarpGrammarParser.INT, 0); }
		public IntConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CarpGrammarParser.STRING, 0); }
		public StringConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CarpGrammarParser.FALSE, 0); }
		public FalseConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CarpGrammarParser.TRUE, 0); }
		public TrueConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CarpGrammarParser.NULL, 0); }
		public NullConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 42, RULE_constant);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				Match(INT);
				}
				break;
			case STRING:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 376;
				Match(STRING);
				}
				break;
			case TRUE:
				_localctx = new TrueConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 377;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 378;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new NullConstantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 379;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : Carp.interpreter.ScopedParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotUnaryContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(CarpGrammarParser.BANG, 0); }
		public NotUnaryContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateUnaryContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CarpGrammarParser.MINUS, 0); }
		public NegateUnaryContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 44, RULE_unary);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new NegateUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				Match(MINUS);
				}
				break;
			case BANG:
				_localctx = new NotUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				Match(BANG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalContext : Carp.interpreter.ScopedParserRuleContext {
		public LogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical; } }
	 
		public LogicalContext() { }
		public virtual void CopyFrom(LogicalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndLogicalContext : LogicalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(CarpGrammarParser.AMPERSAND, 0); }
		public AndLogicalContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrLogicalContext : LogicalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(CarpGrammarParser.PIPE, 0); }
		public OrLogicalContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalContext logical() {
		LogicalContext _localctx = new LogicalContext(Context, State);
		EnterRule(_localctx, 46, RULE_logical);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMPERSAND:
				_localctx = new AndLogicalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				Match(AMPERSAND);
				}
				break;
			case PIPE:
				_localctx = new OrLogicalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(PIPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : Carp.interpreter.ScopedParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_EQUALS() { return GetToken(CarpGrammarParser.EQUALS_EQUALS, 0); }
		public MatchComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanEqualsComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(CarpGrammarParser.GREATER_THAN_EQUALS, 0); }
		public GreaterThanEqualsComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqualsComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(CarpGrammarParser.GREATER_THAN, 0); }
		public GreaterThanComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanEqualsComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_EQUALS() { return GetToken(CarpGrammarParser.LESS_THAN_EQUALS, 0); }
		public LessThanEqualsComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqualsComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotMatchComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(CarpGrammarParser.NOT_EQUALS, 0); }
		public NotMatchComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotMatchComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(CarpGrammarParser.LESS_THAN, 0); }
		public LessThanComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 48, RULE_comparison);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS_EQUALS:
				_localctx = new MatchComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				Match(EQUALS_EQUALS);
				}
				break;
			case NOT_EQUALS:
				_localctx = new NotMatchComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				Match(NOT_EQUALS);
				}
				break;
			case GREATER_THAN:
				_localctx = new GreaterThanComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				Match(GREATER_THAN);
				}
				break;
			case LESS_THAN:
				_localctx = new LessThanComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 393;
				Match(LESS_THAN);
				}
				break;
			case GREATER_THAN_EQUALS:
				_localctx = new GreaterThanEqualsComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 394;
				Match(GREATER_THAN_EQUALS);
				}
				break;
			case LESS_THAN_EQUALS:
				_localctx = new LessThanEqualsComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 395;
				Match(LESS_THAN_EQUALS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : Carp.interpreter.ScopedParserRuleContext {
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
	 
		public BinaryContext() { }
		public virtual void CopyFrom(BinaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(CarpGrammarParser.SLASH, 0); }
		public DivideBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(CarpGrammarParser.CARET, 0); }
		public PowerBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_LSPACE() { return GetToken(CarpGrammarParser.ASTERISK_LSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_BSPACE() { return GetToken(CarpGrammarParser.ASTERISK_BSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_NSPC() { return GetToken(CarpGrammarParser.ASTERISK_NSPC, 0); }
		public MultiplicationBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModulusBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(CarpGrammarParser.PERCENT, 0); }
		public ModulusBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulusBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CarpGrammarParser.PLUS, 0); }
		public AddBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CarpGrammarParser.MINUS, 0); }
		public SubtractBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_binary);
		int _la;
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new AddBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new SubtractBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				Match(MINUS);
				}
				break;
			case ASTERISK_BSPACE:
			case ASTERISK_LSPACE:
			case ASTERISK_NSPC:
				_localctx = new MultiplicationBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 400;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 188978561024L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SLASH:
				_localctx = new DivideBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 401;
				Match(SLASH);
				}
				break;
			case CARET:
				_localctx = new PowerBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 402;
				Match(CARET);
				}
				break;
			case PERCENT:
				_localctx = new ModulusBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 403;
				Match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 52, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(LBRACKET);
			State = 407;
			expression_list();
			State = 408;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _keys = new List<ExpressionContext>();
		public IList<ExpressionContext> _values = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CarpGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CarpGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 54, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(LBRACKET);
			State = 411;
			_localctx._expression = expression(0);
			_localctx._keys.Add(_localctx._expression);
			State = 412;
			Match(COLON);
			State = 413;
			_localctx._expression = expression(0);
			_localctx._values.Add(_localctx._expression);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 414;
				Match(COMMA);
				State = 415;
				_localctx._expression = expression(0);
				_localctx._keys.Add(_localctx._expression);
				State = 416;
				Match(COLON);
				State = 417;
				_localctx._expression = expression(0);
				_localctx._values.Add(_localctx._expression);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : Carp.interpreter.ScopedParserRuleContext {
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
	 
		public ModifierContext() { }
		public virtual void CopyFrom(ModifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrivateModifierContext : ModifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(CarpGrammarParser.UNDERSCORE, 0); }
		public PrivateModifierContext(ModifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_modifier);
		try {
			_localctx = new PrivateModifierContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : Carp.interpreter.ScopedParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CarpGrammarParser.ID, 0); }
		public NamedTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(CarpGrammarParser.LET, 0); }
		public AutoTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapTypeContext : TypeContext {
		public TypeContext key;
		public TypeContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public MapTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTypeContext : TypeContext {
		public TypeContext element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_RSPACE() { return GetToken(CarpGrammarParser.ASTERISK_RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 429;
				Match(ID);
				}
				break;
			case LET:
				{
				_localctx = new AutoTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 430;
				Match(LET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 440;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 438;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new MapTypeContext(new TypeContext(_parentctx, _parentState));
						((MapTypeContext)_localctx).key = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 433;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 434;
						Match(COLON);
						State = 435;
						((MapTypeContext)_localctx).value = type(5);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypeContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).element = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 436;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 437;
						Match(ASTERISK_RSPACE);
						}
						break;
					}
					} 
				}
				State = 442;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_name_listContext : Carp.interpreter.ScopedParserRuleContext {
		public TypeContext _type;
		public IList<TypeContext> _types = new List<TypeContext>();
		public NameContext _name;
		public IList<NameContext> _names = new List<NameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET || _la==ID) {
				{
				State = 443;
				_localctx._type = type(0);
				_localctx._types.Add(_localctx._type);
				State = 444;
				_localctx._name = name();
				_localctx._names.Add(_localctx._name);
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 445;
					Match(COMMA);
					State = 446;
					_localctx._type = type(0);
					_localctx._types.Add(_localctx._type);
					State = 447;
					_localctx._name = name();
					_localctx._names.Add(_localctx._name);
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : Carp.interpreter.ScopedParserRuleContext {
		public ModifierContext _modifier;
		public IList<ModifierContext> _modifiers = new List<ModifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CarpGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 62, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNDERSCORE) {
				{
				{
				State = 456;
				_localctx._modifier = modifier();
				_localctx._modifiers.Add(_localctx._modifier);
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 462;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 29: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 16);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,72,465,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		1,1,5,1,74,8,1,10,1,12,1,77,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,87,
		8,2,1,3,1,3,1,4,1,4,1,4,5,4,94,8,4,10,4,12,4,97,9,4,1,5,1,5,1,5,1,5,3,
		5,103,8,5,1,5,1,5,1,5,3,5,108,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
		118,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,127,8,7,10,7,12,7,130,9,7,1,7,
		1,7,3,7,134,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,
		9,149,8,9,10,9,12,9,152,9,9,1,9,1,9,3,9,156,8,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,5,9,165,8,9,10,9,12,9,168,9,9,1,9,1,9,3,9,172,8,9,3,9,174,8,9,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,210,8,10,1,11,1,11,3,11,214,8,11,1,12,
		1,12,1,13,1,13,1,14,1,14,3,14,222,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,
		15,230,8,15,1,16,5,16,233,8,16,10,16,12,16,236,9,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,265,8,17,10,17,12,17,
		268,9,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,276,8,17,10,17,12,17,279,9,
		17,1,17,1,17,3,17,283,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,301,8,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,5,18,353,8,18,10,18,12,18,356,9,18,1,19,1,19,1,19,5,
		19,361,8,19,10,19,12,19,364,9,19,3,19,366,8,19,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,374,8,20,1,21,1,21,1,21,1,21,1,21,3,21,381,8,21,1,22,1,22,3,
		22,385,8,22,1,23,1,23,3,23,389,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
		397,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,405,8,25,1,26,1,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,420,8,27,10,27,12,
		27,423,9,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,3,29,432,8,29,1,29,1,29,
		1,29,1,29,1,29,5,29,439,8,29,10,29,12,29,442,9,29,1,30,1,30,1,30,1,30,
		1,30,1,30,5,30,450,8,30,10,30,12,30,453,9,30,3,30,455,8,30,1,31,5,31,458,
		8,31,10,31,12,31,461,9,31,1,31,1,31,1,31,0,2,36,58,32,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,0,3,1,0,71,72,1,0,28,29,2,0,34,35,37,37,521,0,67,1,0,0,0,2,75,1,0,0,
		0,4,86,1,0,0,0,6,88,1,0,0,0,8,90,1,0,0,0,10,107,1,0,0,0,12,117,1,0,0,0,
		14,119,1,0,0,0,16,135,1,0,0,0,18,173,1,0,0,0,20,209,1,0,0,0,22,211,1,0,
		0,0,24,215,1,0,0,0,26,217,1,0,0,0,28,219,1,0,0,0,30,229,1,0,0,0,32,234,
		1,0,0,0,34,282,1,0,0,0,36,300,1,0,0,0,38,365,1,0,0,0,40,373,1,0,0,0,42,
		380,1,0,0,0,44,384,1,0,0,0,46,388,1,0,0,0,48,396,1,0,0,0,50,404,1,0,0,
		0,52,406,1,0,0,0,54,410,1,0,0,0,56,426,1,0,0,0,58,431,1,0,0,0,60,454,1,
		0,0,0,62,459,1,0,0,0,64,66,3,10,5,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,
		1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,0,0,1,71,1,1,
		0,0,0,72,74,3,10,5,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,
		0,0,0,76,3,1,0,0,0,77,75,1,0,0,0,78,79,5,6,0,0,79,80,3,2,1,0,80,81,5,7,
		0,0,81,87,1,0,0,0,82,83,5,46,0,0,83,87,3,36,18,0,84,85,5,46,0,0,85,87,
		3,10,5,0,86,78,1,0,0,0,86,82,1,0,0,0,86,84,1,0,0,0,87,5,1,0,0,0,88,89,
		7,0,0,0,89,7,1,0,0,0,90,95,3,6,3,0,91,92,5,2,0,0,92,94,3,6,3,0,93,91,1,
		0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,9,1,0,0,0,97,95,1,0,
		0,0,98,99,5,66,0,0,99,102,3,8,4,0,100,101,5,42,0,0,101,103,3,6,3,0,102,
		100,1,0,0,0,102,103,1,0,0,0,103,108,1,0,0,0,104,108,3,32,16,0,105,108,
		3,36,18,0,106,108,3,12,6,0,107,98,1,0,0,0,107,104,1,0,0,0,107,105,1,0,
		0,0,107,106,1,0,0,0,108,11,1,0,0,0,109,118,3,14,7,0,110,118,3,16,8,0,111,
		118,3,20,10,0,112,118,3,22,11,0,113,118,3,18,9,0,114,118,3,24,12,0,115,
		118,3,26,13,0,116,118,3,28,14,0,117,109,1,0,0,0,117,110,1,0,0,0,117,111,
		1,0,0,0,117,112,1,0,0,0,117,113,1,0,0,0,117,114,1,0,0,0,117,115,1,0,0,
		0,117,116,1,0,0,0,118,13,1,0,0,0,119,120,5,54,0,0,120,121,3,36,18,0,121,
		128,3,4,2,0,122,123,5,56,0,0,123,124,3,36,18,0,124,125,3,4,2,0,125,127,
		1,0,0,0,126,122,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,
		0,129,133,1,0,0,0,130,128,1,0,0,0,131,132,5,55,0,0,132,134,3,4,2,0,133,
		131,1,0,0,0,133,134,1,0,0,0,134,15,1,0,0,0,135,136,5,57,0,0,136,137,3,
		36,18,0,137,138,3,4,2,0,138,17,1,0,0,0,139,140,5,51,0,0,140,150,3,4,2,
		0,141,142,5,52,0,0,142,143,5,4,0,0,143,144,3,58,29,0,144,145,3,62,31,0,
		145,146,5,5,0,0,146,147,3,4,2,0,147,149,1,0,0,0,148,141,1,0,0,0,149,152,
		1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,155,1,0,0,0,152,150,1,0,0,
		0,153,154,5,53,0,0,154,156,3,4,2,0,155,153,1,0,0,0,155,156,1,0,0,0,156,
		174,1,0,0,0,157,158,5,51,0,0,158,166,3,4,2,0,159,160,5,52,0,0,160,161,
		3,58,29,0,161,162,3,62,31,0,162,163,3,4,2,0,163,165,1,0,0,0,164,159,1,
		0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,171,1,0,0,0,
		168,166,1,0,0,0,169,170,5,53,0,0,170,172,3,4,2,0,171,169,1,0,0,0,171,172,
		1,0,0,0,172,174,1,0,0,0,173,139,1,0,0,0,173,157,1,0,0,0,174,19,1,0,0,0,
		175,176,5,58,0,0,176,177,3,36,18,0,177,178,3,4,2,0,178,210,1,0,0,0,179,
		180,5,58,0,0,180,181,3,58,29,0,181,182,3,62,31,0,182,183,5,42,0,0,183,
		184,3,36,18,0,184,185,3,4,2,0,185,210,1,0,0,0,186,187,5,58,0,0,187,188,
		5,4,0,0,188,189,3,58,29,0,189,190,3,62,31,0,190,191,5,42,0,0,191,192,3,
		36,18,0,192,193,5,5,0,0,193,194,3,4,2,0,194,210,1,0,0,0,195,196,5,58,0,
		0,196,197,3,60,30,0,197,198,5,42,0,0,198,199,3,36,18,0,199,200,3,4,2,0,
		200,210,1,0,0,0,201,202,5,58,0,0,202,203,5,4,0,0,203,204,3,60,30,0,204,
		205,5,42,0,0,205,206,3,36,18,0,206,207,5,5,0,0,207,208,3,4,2,0,208,210,
		1,0,0,0,209,175,1,0,0,0,209,179,1,0,0,0,209,186,1,0,0,0,209,195,1,0,0,
		0,209,201,1,0,0,0,210,21,1,0,0,0,211,213,5,59,0,0,212,214,3,36,18,0,213,
		212,1,0,0,0,213,214,1,0,0,0,214,23,1,0,0,0,215,216,5,60,0,0,216,25,1,0,
		0,0,217,218,5,61,0,0,218,27,1,0,0,0,219,221,5,62,0,0,220,222,3,36,18,0,
		221,220,1,0,0,0,221,222,1,0,0,0,222,29,1,0,0,0,223,224,5,20,0,0,224,230,
		3,36,18,0,225,226,5,8,0,0,226,227,3,36,18,0,227,228,5,9,0,0,228,230,1,
		0,0,0,229,223,1,0,0,0,229,225,1,0,0,0,230,31,1,0,0,0,231,233,3,30,15,0,
		232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,
		1,0,0,0,236,234,1,0,0,0,237,238,3,34,17,0,238,33,1,0,0,0,239,240,3,58,
		29,0,240,241,3,62,31,0,241,242,5,10,0,0,242,243,3,36,18,0,243,283,1,0,
		0,0,244,245,3,58,29,0,245,246,3,62,31,0,246,283,1,0,0,0,247,248,3,58,29,
		0,248,249,3,62,31,0,249,250,5,4,0,0,250,251,3,60,30,0,251,252,5,5,0,0,
		252,253,3,4,2,0,253,283,1,0,0,0,254,255,3,58,29,0,255,256,3,62,31,0,256,
		257,5,4,0,0,257,258,3,60,30,0,258,259,5,5,0,0,259,283,1,0,0,0,260,261,
		5,63,0,0,261,262,3,62,31,0,262,266,5,6,0,0,263,265,3,32,16,0,264,263,1,
		0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,
		268,266,1,0,0,0,269,270,5,7,0,0,270,283,1,0,0,0,271,272,5,64,0,0,272,273,
		3,62,31,0,273,277,5,6,0,0,274,276,3,32,16,0,275,274,1,0,0,0,276,279,1,
		0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,
		280,281,5,7,0,0,281,283,1,0,0,0,282,239,1,0,0,0,282,244,1,0,0,0,282,247,
		1,0,0,0,282,254,1,0,0,0,282,260,1,0,0,0,282,271,1,0,0,0,283,35,1,0,0,0,
		284,285,6,18,-1,0,285,301,3,42,21,0,286,287,7,1,0,0,287,301,3,36,18,20,
		288,289,3,44,22,0,289,290,3,36,18,14,290,301,1,0,0,0,291,301,3,54,27,0,
		292,301,3,52,26,0,293,301,3,62,31,0,294,295,5,1,0,0,295,301,3,36,18,6,
		296,297,5,4,0,0,297,298,3,36,18,0,298,299,5,5,0,0,299,301,1,0,0,0,300,
		284,1,0,0,0,300,286,1,0,0,0,300,288,1,0,0,0,300,291,1,0,0,0,300,292,1,
		0,0,0,300,293,1,0,0,0,300,294,1,0,0,0,300,296,1,0,0,0,301,354,1,0,0,0,
		302,303,10,15,0,0,303,304,3,50,25,0,304,305,3,36,18,16,305,353,1,0,0,0,
		306,307,10,13,0,0,307,308,3,48,24,0,308,309,3,36,18,14,309,353,1,0,0,0,
		310,311,10,12,0,0,311,312,3,46,23,0,312,313,3,36,18,13,313,353,1,0,0,0,
		314,315,10,11,0,0,315,316,5,40,0,0,316,317,3,36,18,0,317,318,5,42,0,0,
		318,319,3,36,18,12,319,353,1,0,0,0,320,321,10,7,0,0,321,322,5,1,0,0,322,
		353,3,36,18,8,323,324,10,2,0,0,324,325,5,10,0,0,325,353,3,36,18,3,326,
		327,10,1,0,0,327,328,3,40,20,0,328,329,3,36,18,2,329,353,1,0,0,0,330,331,
		10,21,0,0,331,332,5,19,0,0,332,353,3,58,29,0,333,334,10,19,0,0,334,353,
		7,1,0,0,335,336,10,18,0,0,336,337,5,4,0,0,337,338,3,38,19,0,338,339,5,
		5,0,0,339,353,1,0,0,0,340,341,10,17,0,0,341,342,5,8,0,0,342,343,3,38,19,
		0,343,344,5,9,0,0,344,353,1,0,0,0,345,346,10,16,0,0,346,347,5,2,0,0,347,
		353,3,62,31,0,348,349,10,4,0,0,349,353,5,44,0,0,350,351,10,3,0,0,351,353,
		5,45,0,0,352,302,1,0,0,0,352,306,1,0,0,0,352,310,1,0,0,0,352,314,1,0,0,
		0,352,320,1,0,0,0,352,323,1,0,0,0,352,326,1,0,0,0,352,330,1,0,0,0,352,
		333,1,0,0,0,352,335,1,0,0,0,352,340,1,0,0,0,352,345,1,0,0,0,352,348,1,
		0,0,0,352,350,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,
		355,37,1,0,0,0,356,354,1,0,0,0,357,362,3,36,18,0,358,359,5,3,0,0,359,361,
		3,36,18,0,360,358,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,
		0,0,363,366,1,0,0,0,364,362,1,0,0,0,365,357,1,0,0,0,365,366,1,0,0,0,366,
		39,1,0,0,0,367,374,5,22,0,0,368,374,5,23,0,0,369,374,5,24,0,0,370,374,
		5,25,0,0,371,374,5,26,0,0,372,374,5,27,0,0,373,367,1,0,0,0,373,368,1,0,
		0,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,
		41,1,0,0,0,375,381,5,68,0,0,376,381,5,71,0,0,377,381,5,48,0,0,378,381,
		5,49,0,0,379,381,5,50,0,0,380,375,1,0,0,0,380,376,1,0,0,0,380,377,1,0,
		0,0,380,378,1,0,0,0,380,379,1,0,0,0,381,43,1,0,0,0,382,385,5,31,0,0,383,
		385,5,21,0,0,384,382,1,0,0,0,384,383,1,0,0,0,385,45,1,0,0,0,386,389,5,
		18,0,0,387,389,5,17,0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,47,1,0,0,0,
		390,397,5,11,0,0,391,397,5,12,0,0,392,397,5,13,0,0,393,397,5,14,0,0,394,
		397,5,16,0,0,395,397,5,15,0,0,396,390,1,0,0,0,396,391,1,0,0,0,396,392,
		1,0,0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,49,1,0,0,0,
		398,405,5,30,0,0,399,405,5,31,0,0,400,405,7,2,0,0,401,405,5,32,0,0,402,
		405,5,39,0,0,403,405,5,33,0,0,404,398,1,0,0,0,404,399,1,0,0,0,404,400,
		1,0,0,0,404,401,1,0,0,0,404,402,1,0,0,0,404,403,1,0,0,0,405,51,1,0,0,0,
		406,407,5,8,0,0,407,408,3,38,19,0,408,409,5,9,0,0,409,53,1,0,0,0,410,411,
		5,8,0,0,411,412,3,36,18,0,412,413,5,42,0,0,413,421,3,36,18,0,414,415,5,
		3,0,0,415,416,3,36,18,0,416,417,5,42,0,0,417,418,3,36,18,0,418,420,1,0,
		0,0,419,414,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
		424,1,0,0,0,423,421,1,0,0,0,424,425,5,9,0,0,425,55,1,0,0,0,426,427,5,41,
		0,0,427,57,1,0,0,0,428,429,6,29,-1,0,429,432,5,67,0,0,430,432,5,65,0,0,
		431,428,1,0,0,0,431,430,1,0,0,0,432,440,1,0,0,0,433,434,10,4,0,0,434,435,
		5,42,0,0,435,439,3,58,29,5,436,437,10,3,0,0,437,439,5,36,0,0,438,433,1,
		0,0,0,438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,
		441,59,1,0,0,0,442,440,1,0,0,0,443,444,3,58,29,0,444,451,3,62,31,0,445,
		446,5,3,0,0,446,447,3,58,29,0,447,448,3,62,31,0,448,450,1,0,0,0,449,445,
		1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,455,1,0,0,
		0,453,451,1,0,0,0,454,443,1,0,0,0,454,455,1,0,0,0,455,61,1,0,0,0,456,458,
		3,56,28,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,
		0,0,460,462,1,0,0,0,461,459,1,0,0,0,462,463,5,67,0,0,463,63,1,0,0,0,40,
		67,75,86,95,102,107,117,128,133,150,155,166,171,173,209,213,221,229,234,
		266,277,282,300,352,354,362,365,373,380,384,388,396,404,421,431,438,440,
		451,454,459
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
