//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/melod/source/csharp/Carp\CarpGrammar.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class CarpGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ELIPSIS=1, INDENT=2, PERIOD=3, COMMA=4, LPAREN=5, RPAREN=6, LBRACE=7, 
		RBRACE=8, LBRACKET=9, RBRACKET=10, EQUALS=11, EQUALS_EQUALS=12, NOT_EQUALS=13, 
		GREATER_THAN=14, LESS_THAN=15, LESS_THAN_EQUALS=16, GREATER_THAN_EQUALS=17, 
		PIPE=18, AMPERSAND=19, BANG=20, PLUS_EQUALS=21, MINUS_EQUALS=22, ASTERISK_EQUALS=23, 
		SLASH_EQUALS=24, CARET_EQUALS=25, PLUS_PLUS=26, MINUS_MINUS=27, PLUS=28, 
		MINUS=29, SLASH=30, ASTERISK_BSPACE=31, ASTERISK_LSPACE=32, ASTERISK_RSPACE=33, 
		ASTERISK_NSPC=34, BACKSLASH=35, CARET=36, QUESTION_MARK=37, UNDERSCORE=38, 
		COLON=39, COLON_COLON=40, ARROW=41, WIND=42, HASH=43, TRUE=44, FALSE=45, 
		NULL=46, TRY=47, CATCH=48, FINALLY=49, IF=50, ELSE=51, ELSE_IF=52, WHILE=53, 
		ITER=54, RETURN=55, BREAK=56, CONTINUE=57, YIELD=58, CLASS=59, STRUCT=60, 
		LET=61, ID=62, STRING=63, INT=64, WS=65, COMMENT=66;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_generic_block = 2, RULE_statement = 3, 
		RULE_flow_control = 4, RULE_if_statement = 5, RULE_while_statement = 6, 
		RULE_try_statement = 7, RULE_iter_statement = 8, RULE_return_statement = 9, 
		RULE_break_statement = 10, RULE_continue_statement = 11, RULE_yield_statement = 12, 
		RULE_definition = 13, RULE_expression = 14, RULE_expression_list = 15, 
		RULE_compoundAssignment = 16, RULE_constant = 17, RULE_unary = 18, RULE_logical = 19, 
		RULE_comparison = 20, RULE_binary = 21, RULE_array = 22, RULE_map = 23, 
		RULE_modifier = 24, RULE_type = 25, RULE_type_name_list = 26, RULE_name = 27;
	public static readonly string[] ruleNames = {
		"program", "block", "generic_block", "statement", "flow_control", "if_statement", 
		"while_statement", "try_statement", "iter_statement", "return_statement", 
		"break_statement", "continue_statement", "yield_statement", "definition", 
		"expression", "expression_list", "compoundAssignment", "constant", "unary", 
		"logical", "comparison", "binary", "array", "map", "modifier", "type", 
		"type_name_list", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'..'", "';'", "'.'", "','", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'='", "'=='", null, "'>'", "'<'", "'<='", "'>='", "'|'", "'&'", 
		"'!'", "'+='", "'-='", "'*='", "'/='", "'^='", "'++'", "'--'", "'+'", 
		"'-'", "'/'", "' * '", "' *'", "'* '", "'*'", "'\\'", "'^'", "'?'", "'_'", 
		"':'", "'::'", "'->'", "'%'", "'#'", "'true'", "'false'", "'null'", "'try'", 
		"'catch'", "'finally'", "'if'", "'else'", "'else if'", "'while'", "'for'", 
		"'return'", "'break'", "'continue'", "'yield'", "'class'", "'struct'", 
		"'let'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ELIPSIS", "INDENT", "PERIOD", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "LBRACKET", "RBRACKET", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", 
		"GREATER_THAN", "LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", 
		"PIPE", "AMPERSAND", "BANG", "PLUS_EQUALS", "MINUS_EQUALS", "ASTERISK_EQUALS", 
		"SLASH_EQUALS", "CARET_EQUALS", "PLUS_PLUS", "MINUS_MINUS", "PLUS", "MINUS", 
		"SLASH", "ASTERISK_BSPACE", "ASTERISK_LSPACE", "ASTERISK_RSPACE", "ASTERISK_NSPC", 
		"BACKSLASH", "CARET", "QUESTION_MARK", "UNDERSCORE", "COLON", "COLON_COLON", 
		"ARROW", "WIND", "HASH", "TRUE", "FALSE", "NULL", "TRY", "CATCH", "FINALLY", 
		"IF", "ELSE", "ELSE_IF", "WHILE", "ITER", "RETURN", "BREAK", "CONTINUE", 
		"YIELD", "CLASS", "STRUCT", "LET", "ID", "STRING", "INT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CarpGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CarpGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CarpGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CarpGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CarpGrammarParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			block();
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : Carp.interpreter.ScopedParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(CarpGrammarParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(CarpGrammarParser.INDENT, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -3808570470039277L) != 0)) {
				{
				{
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INDENT) {
					{
					{
					State = 59;
					Match(INDENT);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_blockContext : Carp.interpreter.ScopedParserRuleContext {
		public Generic_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_block; } }
	 
		public Generic_blockContext() { }
		public virtual void CopyFrom(Generic_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(CarpGrammarParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LambdaBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(CarpGrammarParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaExpressionBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpressionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnclosedBlockContext : Generic_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		public EnclosedBlockContext(Generic_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnclosedBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_blockContext generic_block() {
		Generic_blockContext _localctx = new Generic_blockContext(Context, State);
		EnterRule(_localctx, 4, RULE_generic_block);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new EnclosedBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(LBRACE);
				State = 72;
				block();
				State = 73;
				Match(RBRACE);
				}
				break;
			case 2:
				_localctx = new LambdaExpressionBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				Match(ARROW);
				State = 76;
				expression(0);
				}
				break;
			case 3:
				_localctx = new LambdaBlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(ARROW);
				State = 78;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : Carp.interpreter.ScopedParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefinitionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public DefinitionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlowControlStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flow_controlContext flow_control() {
			return GetRuleContext<Flow_controlContext>(0);
		}
		public FlowControlStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new DefinitionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				definition();
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				expression(0);
				}
				break;
			case 3:
				_localctx = new FlowControlStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				flow_control();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_controlContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iter_statementContext iter_statement() {
			return GetRuleContext<Iter_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_statementContext yield_statement() {
			return GetRuleContext<Yield_statementContext>(0);
		}
		public Flow_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlow_control(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flow_controlContext flow_control() {
		Flow_controlContext _localctx = new Flow_controlContext(Context, State);
		EnterRule(_localctx, 8, RULE_flow_control);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				if_statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				while_statement();
				}
				break;
			case ITER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88;
				iter_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89;
				return_statement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90;
				try_statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91;
				break_statement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92;
				continue_statement();
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93;
				yield_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext cond;
		public Generic_blockContext body;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _elif_expressions = new List<ExpressionContext>();
		public Generic_blockContext _generic_block;
		public IList<Generic_blockContext> _elif_blocks = new List<Generic_blockContext>();
		public Generic_blockContext else_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CarpGrammarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext[] generic_block() {
			return GetRuleContexts<Generic_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block(int i) {
			return GetRuleContext<Generic_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE_IF() { return GetTokens(CarpGrammarParser.ELSE_IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF(int i) {
			return GetToken(CarpGrammarParser.ELSE_IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CarpGrammarParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(IF);
			State = 97;
			_localctx.cond = expression(0);
			State = 98;
			_localctx.body = generic_block();
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 99;
					Match(ELSE_IF);
					State = 100;
					_localctx._expression = expression(0);
					_localctx._elif_expressions.Add(_localctx._expression);
					State = 101;
					_localctx._generic_block = generic_block();
					_localctx._elif_blocks.Add(_localctx._generic_block);
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 108;
				Match(ELSE);
				State = 109;
				_localctx.else_block = generic_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext cond;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CarpGrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(WHILE);
			State = 113;
			_localctx.cond = expression(0);
			State = 114;
			_localctx.body = generic_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public Generic_blockContext try_block;
		public TypeContext _type;
		public IList<TypeContext> _catch_types = new List<TypeContext>();
		public NameContext _name;
		public IList<NameContext> _catch_names = new List<NameContext>();
		public Generic_blockContext _generic_block;
		public IList<Generic_blockContext> _catch_blocks = new List<Generic_blockContext>();
		public Generic_blockContext finally_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CarpGrammarParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext[] generic_block() {
			return GetRuleContexts<Generic_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block(int i) {
			return GetRuleContext<Generic_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATCH() { return GetTokens(CarpGrammarParser.CATCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH(int i) {
			return GetToken(CarpGrammarParser.CATCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(CarpGrammarParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(CarpGrammarParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(CarpGrammarParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(CarpGrammarParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CarpGrammarParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_try_statement);
		try {
			int _alt;
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(TRY);
				State = 117;
				_localctx.try_block = generic_block();
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 118;
						Match(CATCH);
						State = 119;
						Match(LPAREN);
						State = 120;
						_localctx._type = type(0);
						_localctx._catch_types.Add(_localctx._type);
						State = 121;
						_localctx._name = name();
						_localctx._catch_names.Add(_localctx._name);
						State = 122;
						Match(RPAREN);
						State = 123;
						_localctx._generic_block = generic_block();
						_localctx._catch_blocks.Add(_localctx._generic_block);
						}
						} 
					}
					State = 129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 130;
					Match(FINALLY);
					State = 131;
					_localctx.finally_block = generic_block();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(TRY);
				State = 135;
				_localctx.try_block = generic_block();
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 136;
						Match(CATCH);
						State = 137;
						_localctx._type = type(0);
						_localctx._catch_types.Add(_localctx._type);
						State = 138;
						_localctx._name = name();
						_localctx._catch_names.Add(_localctx._name);
						State = 139;
						_localctx._generic_block = generic_block();
						_localctx._catch_blocks.Add(_localctx._generic_block);
						}
						} 
					}
					State = 145;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				State = 148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 146;
					Match(FINALLY);
					State = 147;
					_localctx.finally_block = generic_block();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iter_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public Iter_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iter_statement; } }
	 
		public Iter_statementContext() { }
		public virtual void CopyFrom(Iter_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IterStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public IterStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IterAsUnpackedStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		public IterAsUnpackedStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterAsUnpackedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IterAsStatementContext : Iter_statementContext {
		public ExpressionContext iter;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITER() { return GetToken(CarpGrammarParser.ITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		public IterAsStatementContext(Iter_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterAsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iter_statementContext iter_statement() {
		Iter_statementContext _localctx = new Iter_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_iter_statement);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new IterStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(ITER);
				State = 153;
				((IterStatementContext)_localctx).iter = expression(0);
				State = 154;
				((IterStatementContext)_localctx).body = generic_block();
				}
				break;
			case 2:
				_localctx = new IterAsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(ITER);
				State = 157;
				type(0);
				State = 158;
				name();
				State = 159;
				Match(COLON);
				State = 160;
				((IterAsStatementContext)_localctx).iter = expression(0);
				State = 161;
				((IterAsStatementContext)_localctx).body = generic_block();
				}
				break;
			case 3:
				_localctx = new IterAsStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 163;
				Match(ITER);
				State = 164;
				Match(LPAREN);
				State = 165;
				type(0);
				State = 166;
				name();
				State = 167;
				Match(COLON);
				State = 168;
				((IterAsStatementContext)_localctx).iter = expression(0);
				State = 169;
				Match(RPAREN);
				State = 170;
				((IterAsStatementContext)_localctx).body = generic_block();
				}
				break;
			case 4:
				_localctx = new IterAsUnpackedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 172;
				Match(ITER);
				State = 173;
				type_name_list();
				State = 174;
				Match(COLON);
				State = 175;
				((IterAsUnpackedStatementContext)_localctx).iter = expression(0);
				State = 176;
				((IterAsUnpackedStatementContext)_localctx).body = generic_block();
				}
				break;
			case 5:
				_localctx = new IterAsUnpackedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				Match(ITER);
				State = 179;
				Match(LPAREN);
				State = 180;
				type_name_list();
				State = 181;
				Match(COLON);
				State = 182;
				((IterAsUnpackedStatementContext)_localctx).iter = expression(0);
				State = 183;
				Match(RPAREN);
				State = 184;
				((IterAsUnpackedStatementContext)_localctx).body = generic_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CarpGrammarParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(RETURN);
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 189;
				_localctx.value = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CarpGrammarParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CarpGrammarParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_statementContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(CarpGrammarParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Yield_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_statementContext yield_statement() {
		Yield_statementContext _localctx = new Yield_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_yield_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(YIELD);
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 197;
				_localctx.value = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : Carp.interpreter.ScopedParserRuleContext {
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	 
		public DefinitionContext() { }
		public virtual void CopyFrom(DefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyFunctionDefinitionContext : DefinitionContext {
		public TypeContext rtype;
		public Type_name_listContext @values;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		public EmptyFunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDefinitionContext : DefinitionContext {
		public TypeContext rtype;
		public Type_name_listContext @values;
		public Generic_blockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_blockContext generic_block() {
			return GetRuleContext<Generic_blockContext>(0);
		}
		public FunctionDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializedVariableDefinitionContext : DefinitionContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CarpGrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializedVariableDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializedVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDefinitionContext : DefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassDefinitionContext : DefinitionContext {
		public DefinitionContext _definition;
		public IList<DefinitionContext> _definitions = new List<DefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CarpGrammarParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ClassDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDefinitionContext : DefinitionContext {
		public DefinitionContext _definition;
		public IList<DefinitionContext> _definitions = new List<DefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CarpGrammarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CarpGrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CarpGrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public StructDefinitionContext(DefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_definition);
		int _la;
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new InitializedVariableDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				type(0);
				State = 201;
				name();
				State = 202;
				Match(EQUALS);
				State = 203;
				((InitializedVariableDefinitionContext)_localctx).value = expression(0);
				}
				break;
			case 2:
				_localctx = new VariableDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				type(0);
				State = 206;
				name();
				}
				break;
			case 3:
				_localctx = new FunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				((FunctionDefinitionContext)_localctx).rtype = type(0);
				State = 209;
				name();
				State = 210;
				Match(LPAREN);
				State = 211;
				((FunctionDefinitionContext)_localctx).@values = type_name_list();
				State = 212;
				Match(RPAREN);
				State = 213;
				((FunctionDefinitionContext)_localctx).body = generic_block();
				}
				break;
			case 4:
				_localctx = new EmptyFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				((EmptyFunctionDefinitionContext)_localctx).rtype = type(0);
				State = 216;
				name();
				State = 217;
				Match(LPAREN);
				State = 218;
				((EmptyFunctionDefinitionContext)_localctx).@values = type_name_list();
				State = 219;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new ClassDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 221;
				Match(CLASS);
				State = 222;
				name();
				State = 223;
				Match(LBRACE);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646911284551352320L) != 0)) {
					{
					{
					State = 224;
					((ClassDefinitionContext)_localctx)._definition = definition();
					((ClassDefinitionContext)_localctx)._definitions.Add(((ClassDefinitionContext)_localctx)._definition);
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 230;
				Match(RBRACE);
				}
				break;
			case 6:
				_localctx = new StructDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 232;
				Match(STRUCT);
				State = 233;
				name();
				State = 234;
				Match(LBRACE);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646911284551352320L) != 0)) {
					{
					{
					State = 235;
					((StructDefinitionContext)_localctx)._definition = definition();
					((StructDefinitionContext)_localctx)._definitions.Add(((StructDefinitionContext)_localctx)._definition);
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 241;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		public MapExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CarpGrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparisonContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public LogicalContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalContext logical() {
			return GetRuleContext<LogicalContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BinaryContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public Expression_listContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CarpGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CarpGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpressionContext : ExpressionContext {
		public IToken token;
		public ExpressionContext expr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(CarpGrammarParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(CarpGrammarParser.MINUS_MINUS, 0); }
		public InfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundAssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public CompoundAssignmentContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		public CompoundAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSIS() { return GetToken(CarpGrammarParser.ELIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public Expression_listContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public IndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public UnaryContext op;
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(CarpGrammarParser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken token;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(CarpGrammarParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(CarpGrammarParser.MINUS_MINUS, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyExpressionContext : ExpressionContext {
		public ExpressionContext obj;
		public NameContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(CarpGrammarParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PropertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EndRangeExpressionContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSIS() { return GetToken(CarpGrammarParser.ELIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EndRangeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndRangeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 246;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new InfixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				((InfixExpressionContext)_localctx).token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
					((InfixExpressionContext)_localctx).token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 248;
				((InfixExpressionContext)_localctx).expr = expression(18);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249;
				((UnaryExpressionContext)_localctx).op = unary();
				State = 250;
				((UnaryExpressionContext)_localctx).left = expression(14);
				}
				break;
			case 4:
				{
				_localctx = new MapExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 252;
				map();
				}
				break;
			case 5:
				{
				_localctx = new ArrayExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 253;
				array();
				}
				break;
			case 6:
				{
				_localctx = new VariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				name();
				}
				break;
			case 7:
				{
				_localctx = new EndRangeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 255;
				Match(ELIPSIS);
				State = 256;
				((EndRangeExpressionContext)_localctx).right = expression(6);
				}
				break;
			case 8:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257;
				Match(LPAREN);
				State = 258;
				((ParenthesizedExpressionContext)_localctx).obj = expression(0);
				State = 259;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 306;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 263;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 264;
						((BinaryExpressionContext)_localctx).op = binary();
						State = 265;
						((BinaryExpressionContext)_localctx).right = expression(16);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 267;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 268;
						((ComparisonExpressionContext)_localctx).op = comparison();
						State = 269;
						((ComparisonExpressionContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 271;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 272;
						((LogicalExpressionContext)_localctx).op = logical();
						State = 273;
						((LogicalExpressionContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TernaryExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 276;
						Match(QUESTION_MARK);
						State = 277;
						((TernaryExpressionContext)_localctx).left = expression(0);
						State = 278;
						Match(COLON);
						State = 279;
						((TernaryExpressionContext)_localctx).right = expression(12);
						}
						break;
					case 5:
						{
						_localctx = new RangeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RangeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 281;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 282;
						Match(ELIPSIS);
						State = 283;
						((RangeExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 284;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 285;
						Match(EQUALS);
						State = 286;
						((AssignmentExpressionContext)_localctx).right = expression(3);
						}
						break;
					case 7:
						{
						_localctx = new CompoundAssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CompoundAssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 287;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 288;
						((CompoundAssignmentExpressionContext)_localctx).op = compoundAssignment();
						State = 289;
						((CompoundAssignmentExpressionContext)_localctx).right = expression(2);
						}
						break;
					case 8:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 292;
						((PostfixExpressionContext)_localctx).token = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
							((PostfixExpressionContext)_localctx).token = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 9:
						{
						_localctx = new PropertyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PropertyExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 293;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 294;
						Match(PERIOD);
						State = 295;
						((PropertyExpressionContext)_localctx).value = name();
						}
						break;
					case 10:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 296;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 297;
						Match(LPAREN);
						State = 298;
						((CallExpressionContext)_localctx).parameters = expression_list();
						State = 299;
						Match(RPAREN);
						}
						break;
					case 11:
						{
						_localctx = new IndexExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IndexExpressionContext)_localctx).obj = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 301;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 302;
						Match(LBRACKET);
						State = 303;
						((IndexExpressionContext)_localctx).parameters = expression_list();
						State = 304;
						Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expression_listContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _expressions = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -2305781298753961711L) != 0)) {
				{
				State = 311;
				_localctx._expression = expression(0);
				_localctx._expressions.Add(_localctx._expression);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 312;
					Match(COMMA);
					State = 313;
					_localctx._expression = expression(0);
					_localctx._expressions.Add(_localctx._expression);
					}
					}
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentContext : Carp.interpreter.ScopedParserRuleContext {
		public CompoundAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignment; } }
	 
		public CompoundAssignmentContext() { }
		public virtual void CopyFrom(CompoundAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH_EQUALS() { return GetToken(CarpGrammarParser.SLASH_EQUALS, 0); }
		public DivideCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_EQUALS() { return GetToken(CarpGrammarParser.PLUS_EQUALS, 0); }
		public AddCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_EQUALS() { return GetToken(CarpGrammarParser.ASTERISK_EQUALS, 0); }
		public MultiplyCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET_EQUALS() { return GetToken(CarpGrammarParser.CARET_EQUALS, 0); }
		public PowerCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerCompound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractCompoundContext : CompoundAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_EQUALS() { return GetToken(CarpGrammarParser.MINUS_EQUALS, 0); }
		public SubtractCompoundContext(CompoundAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractCompound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentContext compoundAssignment() {
		CompoundAssignmentContext _localctx = new CompoundAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_compoundAssignment);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS_EQUALS:
				_localctx = new AddCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				Match(PLUS_EQUALS);
				}
				break;
			case MINUS_EQUALS:
				_localctx = new SubtractCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				Match(MINUS_EQUALS);
				}
				break;
			case ASTERISK_EQUALS:
				_localctx = new MultiplyCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				Match(ASTERISK_EQUALS);
				}
				break;
			case SLASH_EQUALS:
				_localctx = new DivideCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 324;
				Match(SLASH_EQUALS);
				}
				break;
			case CARET_EQUALS:
				_localctx = new PowerCompoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 325;
				Match(CARET_EQUALS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : Carp.interpreter.ScopedParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CarpGrammarParser.INT, 0); }
		public IntConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CarpGrammarParser.STRING, 0); }
		public StringConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CarpGrammarParser.FALSE, 0); }
		public FalseConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CarpGrammarParser.TRUE, 0); }
		public TrueConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullConstantContext : ConstantContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CarpGrammarParser.NULL, 0); }
		public NullConstantContext(ConstantContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 34, RULE_constant);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				Match(INT);
				}
				break;
			case STRING:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				Match(STRING);
				}
				break;
			case TRUE:
				_localctx = new TrueConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 330;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 331;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new NullConstantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 332;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : Carp.interpreter.ScopedParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotUnaryContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(CarpGrammarParser.BANG, 0); }
		public NotUnaryContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateUnaryContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CarpGrammarParser.MINUS, 0); }
		public NegateUnaryContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_unary);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new NegateUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				Match(MINUS);
				}
				break;
			case BANG:
				_localctx = new NotUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				Match(BANG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalContext : Carp.interpreter.ScopedParserRuleContext {
		public LogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical; } }
	 
		public LogicalContext() { }
		public virtual void CopyFrom(LogicalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndLogicalContext : LogicalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(CarpGrammarParser.AMPERSAND, 0); }
		public AndLogicalContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrLogicalContext : LogicalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(CarpGrammarParser.PIPE, 0); }
		public OrLogicalContext(LogicalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrLogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalContext logical() {
		LogicalContext _localctx = new LogicalContext(Context, State);
		EnterRule(_localctx, 38, RULE_logical);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMPERSAND:
				_localctx = new AndLogicalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				Match(AMPERSAND);
				}
				break;
			case PIPE:
				_localctx = new OrLogicalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				Match(PIPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : Carp.interpreter.ScopedParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatchComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_EQUALS() { return GetToken(CarpGrammarParser.EQUALS_EQUALS, 0); }
		public MatchComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanEqualsComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(CarpGrammarParser.GREATER_THAN_EQUALS, 0); }
		public GreaterThanEqualsComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanEqualsComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(CarpGrammarParser.GREATER_THAN, 0); }
		public GreaterThanComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanEqualsComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_EQUALS() { return GetToken(CarpGrammarParser.LESS_THAN_EQUALS, 0); }
		public LessThanEqualsComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanEqualsComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotMatchComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(CarpGrammarParser.NOT_EQUALS, 0); }
		public NotMatchComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotMatchComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanComparisonContext : ComparisonContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(CarpGrammarParser.LESS_THAN, 0); }
		public LessThanComparisonContext(ComparisonContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 40, RULE_comparison);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS_EQUALS:
				_localctx = new MatchComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				Match(EQUALS_EQUALS);
				}
				break;
			case NOT_EQUALS:
				_localctx = new NotMatchComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				Match(NOT_EQUALS);
				}
				break;
			case GREATER_THAN:
				_localctx = new GreaterThanComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 345;
				Match(GREATER_THAN);
				}
				break;
			case LESS_THAN:
				_localctx = new LessThanComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 346;
				Match(LESS_THAN);
				}
				break;
			case GREATER_THAN_EQUALS:
				_localctx = new GreaterThanEqualsComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 347;
				Match(GREATER_THAN_EQUALS);
				}
				break;
			case LESS_THAN_EQUALS:
				_localctx = new LessThanEqualsComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 348;
				Match(LESS_THAN_EQUALS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : Carp.interpreter.ScopedParserRuleContext {
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
	 
		public BinaryContext() { }
		public virtual void CopyFrom(BinaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(CarpGrammarParser.SLASH, 0); }
		public DivideBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(CarpGrammarParser.CARET, 0); }
		public PowerBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_LSPACE() { return GetToken(CarpGrammarParser.ASTERISK_LSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_BSPACE() { return GetToken(CarpGrammarParser.ASTERISK_BSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_NSPC() { return GetToken(CarpGrammarParser.ASTERISK_NSPC, 0); }
		public MultiplicationBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CarpGrammarParser.PLUS, 0); }
		public AddBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractBinaryContext : BinaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CarpGrammarParser.MINUS, 0); }
		public SubtractBinaryContext(BinaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 42, RULE_binary);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new AddBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				Match(PLUS);
				}
				break;
			case MINUS:
				_localctx = new SubtractBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 352;
				Match(MINUS);
				}
				break;
			case ASTERISK_BSPACE:
			case ASTERISK_LSPACE:
			case ASTERISK_NSPC:
				_localctx = new MultiplicationBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 353;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 23622320128L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SLASH:
				_localctx = new DivideBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 354;
				Match(SLASH);
				}
				break;
			case CARET:
				_localctx = new PowerBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 355;
				Match(CARET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : Carp.interpreter.ScopedParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(LBRACKET);
			State = 359;
			expression_list();
			State = 360;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : Carp.interpreter.ScopedParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _keys = new List<ExpressionContext>();
		public IList<ExpressionContext> _values = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CarpGrammarParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CarpGrammarParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CarpGrammarParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CarpGrammarParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 46, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(LBRACKET);
			State = 363;
			_localctx._expression = expression(0);
			_localctx._keys.Add(_localctx._expression);
			State = 364;
			Match(COLON);
			State = 365;
			_localctx._expression = expression(0);
			_localctx._values.Add(_localctx._expression);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 366;
				Match(COMMA);
				State = 367;
				_localctx._expression = expression(0);
				_localctx._keys.Add(_localctx._expression);
				State = 368;
				Match(COLON);
				State = 369;
				_localctx._expression = expression(0);
				_localctx._values.Add(_localctx._expression);
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : Carp.interpreter.ScopedParserRuleContext {
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
	 
		public ModifierContext() { }
		public virtual void CopyFrom(ModifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrivateModifierContext : ModifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(CarpGrammarParser.UNDERSCORE, 0); }
		public PrivateModifierContext(ModifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivateModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_modifier);
		try {
			_localctx = new PrivateModifierContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : Carp.interpreter.ScopedParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CarpGrammarParser.ID, 0); }
		public NamedTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoTypeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(CarpGrammarParser.LET, 0); }
		public AutoTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapTypeContext : TypeContext {
		public TypeContext key;
		public TypeContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CarpGrammarParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public MapTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTypeContext : TypeContext {
		public TypeContext element;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK_RSPACE() { return GetToken(CarpGrammarParser.ASTERISK_RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 381;
				Match(ID);
				}
				break;
			case LET:
				{
				_localctx = new AutoTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(LET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 390;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new MapTypeContext(new TypeContext(_parentctx, _parentState));
						((MapTypeContext)_localctx).key = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 385;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 386;
						Match(COLON);
						State = 387;
						((MapTypeContext)_localctx).value = type(5);
						}
						break;
					case 2:
						{
						_localctx = new ListTypeContext(new TypeContext(_parentctx, _parentState));
						((ListTypeContext)_localctx).element = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 388;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 389;
						Match(ASTERISK_RSPACE);
						}
						break;
					}
					} 
				}
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_name_listContext : Carp.interpreter.ScopedParserRuleContext {
		public TypeContext _type;
		public IList<TypeContext> _types = new List<TypeContext>();
		public NameContext _name;
		public IList<NameContext> _names = new List<NameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CarpGrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CarpGrammarParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 52, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LET || _la==ID) {
				{
				State = 395;
				_localctx._type = type(0);
				_localctx._types.Add(_localctx._type);
				State = 396;
				_localctx._name = name();
				_localctx._names.Add(_localctx._name);
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 397;
					Match(COMMA);
					State = 398;
					_localctx._type = type(0);
					_localctx._types.Add(_localctx._type);
					State = 399;
					_localctx._name = name();
					_localctx._names.Add(_localctx._name);
					}
					}
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : Carp.interpreter.ScopedParserRuleContext {
		public ModifierContext _modifier;
		public IList<ModifierContext> _modifiers = new List<ModifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CarpGrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICarpGrammarVisitor<TResult> typedVisitor = visitor as ICarpGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 54, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNDERSCORE) {
				{
				{
				State = 408;
				_localctx._modifier = modifier();
				_localctx._modifiers.Add(_localctx._modifier);
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 414;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 25: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,417,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,
		0,1,1,5,1,61,8,1,10,1,12,1,64,9,1,1,1,5,1,67,8,1,10,1,12,1,70,9,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,80,8,2,1,3,1,3,1,3,3,3,85,8,3,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,3,4,95,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,104,
		8,5,10,5,12,5,107,9,5,1,5,1,5,3,5,111,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,5,7,126,8,7,10,7,12,7,129,9,7,1,7,1,7,3,7,133,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,142,8,7,10,7,12,7,145,9,7,1,7,1,7,
		3,7,149,8,7,3,7,151,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,3,8,187,8,8,1,9,1,9,3,9,191,8,9,1,10,1,10,1,11,1,11,
		1,12,1,12,3,12,199,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,5,13,226,8,13,10,13,12,13,229,9,13,1,13,1,13,1,13,1,13,1,13,1,
		13,5,13,237,8,13,10,13,12,13,240,9,13,1,13,1,13,3,13,244,8,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		3,14,262,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,5,14,307,8,14,10,14,12,14,310,9,14,1,15,1,15,1,15,5,
		15,315,8,15,10,15,12,15,318,9,15,3,15,320,8,15,1,16,1,16,1,16,1,16,1,16,
		3,16,327,8,16,1,17,1,17,1,17,1,17,1,17,3,17,334,8,17,1,18,1,18,3,18,338,
		8,18,1,19,1,19,3,19,342,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,350,8,
		20,1,21,1,21,1,21,1,21,1,21,3,21,357,8,21,1,22,1,22,1,22,1,22,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,372,8,23,10,23,12,23,375,9,23,
		1,23,1,23,1,24,1,24,1,25,1,25,1,25,3,25,384,8,25,1,25,1,25,1,25,1,25,1,
		25,5,25,391,8,25,10,25,12,25,394,9,25,1,26,1,26,1,26,1,26,1,26,1,26,5,
		26,402,8,26,10,26,12,26,405,9,26,3,26,407,8,26,1,27,5,27,410,8,27,10,27,
		12,27,413,9,27,1,27,1,27,1,27,0,2,28,50,28,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,2,1,0,26,27,2,0,31,
		32,34,34,467,0,56,1,0,0,0,2,68,1,0,0,0,4,79,1,0,0,0,6,84,1,0,0,0,8,94,
		1,0,0,0,10,96,1,0,0,0,12,112,1,0,0,0,14,150,1,0,0,0,16,186,1,0,0,0,18,
		188,1,0,0,0,20,192,1,0,0,0,22,194,1,0,0,0,24,196,1,0,0,0,26,243,1,0,0,
		0,28,261,1,0,0,0,30,319,1,0,0,0,32,326,1,0,0,0,34,333,1,0,0,0,36,337,1,
		0,0,0,38,341,1,0,0,0,40,349,1,0,0,0,42,356,1,0,0,0,44,358,1,0,0,0,46,362,
		1,0,0,0,48,378,1,0,0,0,50,383,1,0,0,0,52,406,1,0,0,0,54,411,1,0,0,0,56,
		57,3,2,1,0,57,58,5,0,0,1,58,1,1,0,0,0,59,61,5,2,0,0,60,59,1,0,0,0,61,64,
		1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,67,
		3,6,3,0,66,62,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,3,1,
		0,0,0,70,68,1,0,0,0,71,72,5,7,0,0,72,73,3,2,1,0,73,74,5,8,0,0,74,80,1,
		0,0,0,75,76,5,41,0,0,76,80,3,28,14,0,77,78,5,41,0,0,78,80,3,6,3,0,79,71,
		1,0,0,0,79,75,1,0,0,0,79,77,1,0,0,0,80,5,1,0,0,0,81,85,3,26,13,0,82,85,
		3,28,14,0,83,85,3,8,4,0,84,81,1,0,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,7,
		1,0,0,0,86,95,3,10,5,0,87,95,3,12,6,0,88,95,3,16,8,0,89,95,3,18,9,0,90,
		95,3,14,7,0,91,95,3,20,10,0,92,95,3,22,11,0,93,95,3,24,12,0,94,86,1,0,
		0,0,94,87,1,0,0,0,94,88,1,0,0,0,94,89,1,0,0,0,94,90,1,0,0,0,94,91,1,0,
		0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,9,1,0,0,0,96,97,5,50,0,0,97,98,3,28,
		14,0,98,105,3,4,2,0,99,100,5,52,0,0,100,101,3,28,14,0,101,102,3,4,2,0,
		102,104,1,0,0,0,103,99,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,
		1,0,0,0,106,110,1,0,0,0,107,105,1,0,0,0,108,109,5,51,0,0,109,111,3,4,2,
		0,110,108,1,0,0,0,110,111,1,0,0,0,111,11,1,0,0,0,112,113,5,53,0,0,113,
		114,3,28,14,0,114,115,3,4,2,0,115,13,1,0,0,0,116,117,5,47,0,0,117,127,
		3,4,2,0,118,119,5,48,0,0,119,120,5,5,0,0,120,121,3,50,25,0,121,122,3,54,
		27,0,122,123,5,6,0,0,123,124,3,4,2,0,124,126,1,0,0,0,125,118,1,0,0,0,126,
		129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,132,1,0,0,0,129,127,1,
		0,0,0,130,131,5,49,0,0,131,133,3,4,2,0,132,130,1,0,0,0,132,133,1,0,0,0,
		133,151,1,0,0,0,134,135,5,47,0,0,135,143,3,4,2,0,136,137,5,48,0,0,137,
		138,3,50,25,0,138,139,3,54,27,0,139,140,3,4,2,0,140,142,1,0,0,0,141,136,
		1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,148,1,0,0,
		0,145,143,1,0,0,0,146,147,5,49,0,0,147,149,3,4,2,0,148,146,1,0,0,0,148,
		149,1,0,0,0,149,151,1,0,0,0,150,116,1,0,0,0,150,134,1,0,0,0,151,15,1,0,
		0,0,152,153,5,54,0,0,153,154,3,28,14,0,154,155,3,4,2,0,155,187,1,0,0,0,
		156,157,5,54,0,0,157,158,3,50,25,0,158,159,3,54,27,0,159,160,5,39,0,0,
		160,161,3,28,14,0,161,162,3,4,2,0,162,187,1,0,0,0,163,164,5,54,0,0,164,
		165,5,5,0,0,165,166,3,50,25,0,166,167,3,54,27,0,167,168,5,39,0,0,168,169,
		3,28,14,0,169,170,5,6,0,0,170,171,3,4,2,0,171,187,1,0,0,0,172,173,5,54,
		0,0,173,174,3,52,26,0,174,175,5,39,0,0,175,176,3,28,14,0,176,177,3,4,2,
		0,177,187,1,0,0,0,178,179,5,54,0,0,179,180,5,5,0,0,180,181,3,52,26,0,181,
		182,5,39,0,0,182,183,3,28,14,0,183,184,5,6,0,0,184,185,3,4,2,0,185,187,
		1,0,0,0,186,152,1,0,0,0,186,156,1,0,0,0,186,163,1,0,0,0,186,172,1,0,0,
		0,186,178,1,0,0,0,187,17,1,0,0,0,188,190,5,55,0,0,189,191,3,28,14,0,190,
		189,1,0,0,0,190,191,1,0,0,0,191,19,1,0,0,0,192,193,5,56,0,0,193,21,1,0,
		0,0,194,195,5,57,0,0,195,23,1,0,0,0,196,198,5,58,0,0,197,199,3,28,14,0,
		198,197,1,0,0,0,198,199,1,0,0,0,199,25,1,0,0,0,200,201,3,50,25,0,201,202,
		3,54,27,0,202,203,5,11,0,0,203,204,3,28,14,0,204,244,1,0,0,0,205,206,3,
		50,25,0,206,207,3,54,27,0,207,244,1,0,0,0,208,209,3,50,25,0,209,210,3,
		54,27,0,210,211,5,5,0,0,211,212,3,52,26,0,212,213,5,6,0,0,213,214,3,4,
		2,0,214,244,1,0,0,0,215,216,3,50,25,0,216,217,3,54,27,0,217,218,5,5,0,
		0,218,219,3,52,26,0,219,220,5,6,0,0,220,244,1,0,0,0,221,222,5,59,0,0,222,
		223,3,54,27,0,223,227,5,7,0,0,224,226,3,26,13,0,225,224,1,0,0,0,226,229,
		1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,
		0,230,231,5,8,0,0,231,244,1,0,0,0,232,233,5,60,0,0,233,234,3,54,27,0,234,
		238,5,7,0,0,235,237,3,26,13,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
		1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,5,8,0,
		0,242,244,1,0,0,0,243,200,1,0,0,0,243,205,1,0,0,0,243,208,1,0,0,0,243,
		215,1,0,0,0,243,221,1,0,0,0,243,232,1,0,0,0,244,27,1,0,0,0,245,246,6,14,
		-1,0,246,262,3,34,17,0,247,248,7,0,0,0,248,262,3,28,14,18,249,250,3,36,
		18,0,250,251,3,28,14,14,251,262,1,0,0,0,252,262,3,46,23,0,253,262,3,44,
		22,0,254,262,3,54,27,0,255,256,5,1,0,0,256,262,3,28,14,6,257,258,5,5,0,
		0,258,259,3,28,14,0,259,260,5,6,0,0,260,262,1,0,0,0,261,245,1,0,0,0,261,
		247,1,0,0,0,261,249,1,0,0,0,261,252,1,0,0,0,261,253,1,0,0,0,261,254,1,
		0,0,0,261,255,1,0,0,0,261,257,1,0,0,0,262,308,1,0,0,0,263,264,10,15,0,
		0,264,265,3,42,21,0,265,266,3,28,14,16,266,307,1,0,0,0,267,268,10,13,0,
		0,268,269,3,40,20,0,269,270,3,28,14,14,270,307,1,0,0,0,271,272,10,12,0,
		0,272,273,3,38,19,0,273,274,3,28,14,13,274,307,1,0,0,0,275,276,10,11,0,
		0,276,277,5,37,0,0,277,278,3,28,14,0,278,279,5,39,0,0,279,280,3,28,14,
		12,280,307,1,0,0,0,281,282,10,7,0,0,282,283,5,1,0,0,283,307,3,28,14,8,
		284,285,10,2,0,0,285,286,5,11,0,0,286,307,3,28,14,3,287,288,10,1,0,0,288,
		289,3,32,16,0,289,290,3,28,14,2,290,307,1,0,0,0,291,292,10,17,0,0,292,
		307,7,0,0,0,293,294,10,16,0,0,294,295,5,3,0,0,295,307,3,54,27,0,296,297,
		10,5,0,0,297,298,5,5,0,0,298,299,3,30,15,0,299,300,5,6,0,0,300,307,1,0,
		0,0,301,302,10,4,0,0,302,303,5,9,0,0,303,304,3,30,15,0,304,305,5,10,0,
		0,305,307,1,0,0,0,306,263,1,0,0,0,306,267,1,0,0,0,306,271,1,0,0,0,306,
		275,1,0,0,0,306,281,1,0,0,0,306,284,1,0,0,0,306,287,1,0,0,0,306,291,1,
		0,0,0,306,293,1,0,0,0,306,296,1,0,0,0,306,301,1,0,0,0,307,310,1,0,0,0,
		308,306,1,0,0,0,308,309,1,0,0,0,309,29,1,0,0,0,310,308,1,0,0,0,311,316,
		3,28,14,0,312,313,5,4,0,0,313,315,3,28,14,0,314,312,1,0,0,0,315,318,1,
		0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,
		319,311,1,0,0,0,319,320,1,0,0,0,320,31,1,0,0,0,321,327,5,21,0,0,322,327,
		5,22,0,0,323,327,5,23,0,0,324,327,5,24,0,0,325,327,5,25,0,0,326,321,1,
		0,0,0,326,322,1,0,0,0,326,323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,
		327,33,1,0,0,0,328,334,5,64,0,0,329,334,5,63,0,0,330,334,5,44,0,0,331,
		334,5,45,0,0,332,334,5,46,0,0,333,328,1,0,0,0,333,329,1,0,0,0,333,330,
		1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,35,1,0,0,0,335,338,5,29,0,
		0,336,338,5,20,0,0,337,335,1,0,0,0,337,336,1,0,0,0,338,37,1,0,0,0,339,
		342,5,19,0,0,340,342,5,18,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,39,1,
		0,0,0,343,350,5,12,0,0,344,350,5,13,0,0,345,350,5,14,0,0,346,350,5,15,
		0,0,347,350,5,17,0,0,348,350,5,16,0,0,349,343,1,0,0,0,349,344,1,0,0,0,
		349,345,1,0,0,0,349,346,1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,350,41,
		1,0,0,0,351,357,5,28,0,0,352,357,5,29,0,0,353,357,7,1,0,0,354,357,5,30,
		0,0,355,357,5,36,0,0,356,351,1,0,0,0,356,352,1,0,0,0,356,353,1,0,0,0,356,
		354,1,0,0,0,356,355,1,0,0,0,357,43,1,0,0,0,358,359,5,9,0,0,359,360,3,30,
		15,0,360,361,5,10,0,0,361,45,1,0,0,0,362,363,5,9,0,0,363,364,3,28,14,0,
		364,365,5,39,0,0,365,373,3,28,14,0,366,367,5,4,0,0,367,368,3,28,14,0,368,
		369,5,39,0,0,369,370,3,28,14,0,370,372,1,0,0,0,371,366,1,0,0,0,372,375,
		1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,
		0,376,377,5,10,0,0,377,47,1,0,0,0,378,379,5,38,0,0,379,49,1,0,0,0,380,
		381,6,25,-1,0,381,384,5,62,0,0,382,384,5,61,0,0,383,380,1,0,0,0,383,382,
		1,0,0,0,384,392,1,0,0,0,385,386,10,4,0,0,386,387,5,39,0,0,387,391,3,50,
		25,5,388,389,10,3,0,0,389,391,5,33,0,0,390,385,1,0,0,0,390,388,1,0,0,0,
		391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,51,1,0,0,0,394,392,
		1,0,0,0,395,396,3,50,25,0,396,403,3,54,27,0,397,398,5,4,0,0,398,399,3,
		50,25,0,399,400,3,54,27,0,400,402,1,0,0,0,401,397,1,0,0,0,402,405,1,0,
		0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,406,
		395,1,0,0,0,406,407,1,0,0,0,407,53,1,0,0,0,408,410,3,48,24,0,409,408,1,
		0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,
		413,411,1,0,0,0,414,415,5,62,0,0,415,55,1,0,0,0,36,62,68,79,84,94,105,
		110,127,132,143,148,150,186,190,198,227,238,243,261,306,308,316,319,326,
		333,337,341,349,356,373,383,390,392,403,406,411
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
