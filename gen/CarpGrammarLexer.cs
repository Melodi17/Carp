//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/melod/source/csharp/Carp/CarpGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CarpGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ELIPSIS=1, PERIOD=2, COMMA=3, LPAREN=4, RPAREN=5, LBRACE=6, RBRACE=7, 
		LBRACKET=8, RBRACKET=9, EQUALS=10, EQUALS_EQUALS=11, NOT_EQUALS=12, GREATER_THAN=13, 
		LESS_THAN=14, LESS_THAN_EQUALS=15, GREATER_THAN_EQUALS=16, PIPE=17, AMPERSAND=18, 
		TILDE=19, TILDE_TILDE=20, AT=21, BANG=22, PLUS_EQUALS=23, MINUS_EQUALS=24, 
		ASTERISK_EQUALS=25, SLASH_EQUALS=26, CARET_EQUALS=27, PERCENT_EQUALS=28, 
		PLUS_PLUS=29, MINUS_MINUS=30, PLUS=31, MINUS=32, SLASH=33, PERCENT=34, 
		ASTERISK_BSPACE=35, ASTERISK_LSPACE=36, ASTERISK_RSPACE=37, ASTERISK_NSPC=38, 
		BACKSLASH=39, CARET=40, QUESTION_MARK=41, UNDERSCORE=42, COLON=43, SEMICOLON=44, 
		COLON_COLON=45, SEMICOLON_SEMICOLON=46, ARROW=47, HASH=48, TRUE=49, FALSE=50, 
		NULL=51, TRY=52, CATCH=53, FINALLY=54, IF=55, ELSE=56, ELSE_IF=57, WHILE=58, 
		ITER=59, RETURN=60, BREAK=61, CONTINUE=62, YIELD=63, CLASS=64, STRUCT=65, 
		LET=66, ID=67, INT=68, WS=69, COMMENT=70, STRING=71;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ELIPSIS", "PERIOD", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACKET", "RBRACKET", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", "GREATER_THAN", 
		"LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "PIPE", "AMPERSAND", 
		"TILDE", "TILDE_TILDE", "AT", "BANG", "PLUS_EQUALS", "MINUS_EQUALS", "ASTERISK_EQUALS", 
		"SLASH_EQUALS", "CARET_EQUALS", "PERCENT_EQUALS", "PLUS_PLUS", "MINUS_MINUS", 
		"PLUS", "MINUS", "SLASH", "PERCENT", "ASTERISK_BSPACE", "ASTERISK_LSPACE", 
		"ASTERISK_RSPACE", "ASTERISK_NSPC", "BACKSLASH", "CARET", "QUESTION_MARK", 
		"UNDERSCORE", "COLON", "SEMICOLON", "COLON_COLON", "SEMICOLON_SEMICOLON", 
		"ARROW", "HASH", "TRUE", "FALSE", "NULL", "TRY", "CATCH", "FINALLY", "IF", 
		"ELSE", "ELSE_IF", "WHILE", "ITER", "RETURN", "BREAK", "CONTINUE", "YIELD", 
		"CLASS", "STRUCT", "LET", "ID", "INT", "WS", "COMMENT", "STRING", "SHORT_STRING_ITEM_FOR_SINGLE_QUOTE", 
		"SHORT_STRING_CHAR_NO_SINGLE_QUOTE"
	};


	public CarpGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CarpGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'..'", "'.'", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'='", "'=='", null, "'>'", "'<'", "'<='", "'>='", "'|'", "'&'", "'~'", 
		"'~~'", "'@'", "'!'", "'+='", "'-='", "'*='", "'/='", "'^='", "'%='", 
		"'++'", "'--'", "'+'", "'-'", "'/'", "'%'", "' * '", "' *'", "'* '", "'*'", 
		"'\\'", "'^'", "'?'", "'_'", "':'", "';'", "'::'", "';;'", "'->'", "'#'", 
		"'true'", "'false'", "'null'", "'try'", "'catch'", "'finally'", "'if'", 
		"'else'", "'else if'", "'while'", "'for'", "'return'", "'break'", "'continue'", 
		"'yield'", "'class'", "'struct'", "'let'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ELIPSIS", "PERIOD", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACKET", "RBRACKET", "EQUALS", "EQUALS_EQUALS", "NOT_EQUALS", "GREATER_THAN", 
		"LESS_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "PIPE", "AMPERSAND", 
		"TILDE", "TILDE_TILDE", "AT", "BANG", "PLUS_EQUALS", "MINUS_EQUALS", "ASTERISK_EQUALS", 
		"SLASH_EQUALS", "CARET_EQUALS", "PERCENT_EQUALS", "PLUS_PLUS", "MINUS_MINUS", 
		"PLUS", "MINUS", "SLASH", "PERCENT", "ASTERISK_BSPACE", "ASTERISK_LSPACE", 
		"ASTERISK_RSPACE", "ASTERISK_NSPC", "BACKSLASH", "CARET", "QUESTION_MARK", 
		"UNDERSCORE", "COLON", "SEMICOLON", "COLON_COLON", "SEMICOLON_SEMICOLON", 
		"ARROW", "HASH", "TRUE", "FALSE", "NULL", "TRY", "CATCH", "FINALLY", "IF", 
		"ELSE", "ELSE_IF", "WHILE", "ITER", "RETURN", "BREAK", "CONTINUE", "YIELD", 
		"CLASS", "STRUCT", "LET", "ID", "INT", "WS", "COMMENT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CarpGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CarpGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,71,440,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
		5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
		11,3,11,176,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
		1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
		1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
		1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
		1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
		1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
		1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,
		1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,
		1,65,1,65,1,66,1,66,5,66,375,8,66,10,66,12,66,378,9,66,1,67,3,67,381,8,
		67,1,67,4,67,384,8,67,11,67,12,67,385,1,67,4,67,389,8,67,11,67,12,67,390,
		1,67,1,67,4,67,395,8,67,11,67,12,67,396,1,67,1,67,4,67,401,8,67,11,67,
		12,67,402,3,67,405,8,67,1,68,4,68,408,8,68,11,68,12,68,409,1,68,1,68,1,
		69,1,69,5,69,416,8,69,10,69,12,69,419,9,69,1,69,1,69,1,69,1,69,1,70,1,
		70,5,70,427,8,70,10,70,12,70,430,9,70,1,70,1,70,1,71,1,71,1,71,3,71,437,
		8,71,1,72,1,72,1,417,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
		69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
		93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
		57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,
		67,135,68,137,69,139,70,141,71,143,0,145,0,1,0,6,2,0,65,90,97,122,4,0,
		48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,1,0,10,10,2,0,
		39,39,92,92,450,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
		0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
		0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
		0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,
		0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,1,147,1,0,0,0,3,150,1,0,0,0,5,152,1,
		0,0,0,7,154,1,0,0,0,9,156,1,0,0,0,11,158,1,0,0,0,13,160,1,0,0,0,15,162,
		1,0,0,0,17,164,1,0,0,0,19,166,1,0,0,0,21,168,1,0,0,0,23,175,1,0,0,0,25,
		177,1,0,0,0,27,179,1,0,0,0,29,181,1,0,0,0,31,184,1,0,0,0,33,187,1,0,0,
		0,35,189,1,0,0,0,37,191,1,0,0,0,39,193,1,0,0,0,41,196,1,0,0,0,43,198,1,
		0,0,0,45,200,1,0,0,0,47,203,1,0,0,0,49,206,1,0,0,0,51,209,1,0,0,0,53,212,
		1,0,0,0,55,215,1,0,0,0,57,218,1,0,0,0,59,221,1,0,0,0,61,224,1,0,0,0,63,
		226,1,0,0,0,65,228,1,0,0,0,67,230,1,0,0,0,69,232,1,0,0,0,71,236,1,0,0,
		0,73,239,1,0,0,0,75,242,1,0,0,0,77,244,1,0,0,0,79,246,1,0,0,0,81,248,1,
		0,0,0,83,250,1,0,0,0,85,252,1,0,0,0,87,254,1,0,0,0,89,256,1,0,0,0,91,259,
		1,0,0,0,93,262,1,0,0,0,95,265,1,0,0,0,97,267,1,0,0,0,99,272,1,0,0,0,101,
		278,1,0,0,0,103,283,1,0,0,0,105,287,1,0,0,0,107,293,1,0,0,0,109,301,1,
		0,0,0,111,304,1,0,0,0,113,309,1,0,0,0,115,317,1,0,0,0,117,323,1,0,0,0,
		119,327,1,0,0,0,121,334,1,0,0,0,123,340,1,0,0,0,125,349,1,0,0,0,127,355,
		1,0,0,0,129,361,1,0,0,0,131,368,1,0,0,0,133,372,1,0,0,0,135,380,1,0,0,
		0,137,407,1,0,0,0,139,413,1,0,0,0,141,424,1,0,0,0,143,436,1,0,0,0,145,
		438,1,0,0,0,147,148,5,46,0,0,148,149,5,46,0,0,149,2,1,0,0,0,150,151,5,
		46,0,0,151,4,1,0,0,0,152,153,5,44,0,0,153,6,1,0,0,0,154,155,5,40,0,0,155,
		8,1,0,0,0,156,157,5,41,0,0,157,10,1,0,0,0,158,159,5,123,0,0,159,12,1,0,
		0,0,160,161,5,125,0,0,161,14,1,0,0,0,162,163,5,91,0,0,163,16,1,0,0,0,164,
		165,5,93,0,0,165,18,1,0,0,0,166,167,5,61,0,0,167,20,1,0,0,0,168,169,5,
		61,0,0,169,170,5,61,0,0,170,22,1,0,0,0,171,172,5,33,0,0,172,176,5,61,0,
		0,173,174,5,60,0,0,174,176,5,62,0,0,175,171,1,0,0,0,175,173,1,0,0,0,176,
		24,1,0,0,0,177,178,5,62,0,0,178,26,1,0,0,0,179,180,5,60,0,0,180,28,1,0,
		0,0,181,182,5,60,0,0,182,183,5,61,0,0,183,30,1,0,0,0,184,185,5,62,0,0,
		185,186,5,61,0,0,186,32,1,0,0,0,187,188,5,124,0,0,188,34,1,0,0,0,189,190,
		5,38,0,0,190,36,1,0,0,0,191,192,5,126,0,0,192,38,1,0,0,0,193,194,5,126,
		0,0,194,195,5,126,0,0,195,40,1,0,0,0,196,197,5,64,0,0,197,42,1,0,0,0,198,
		199,5,33,0,0,199,44,1,0,0,0,200,201,5,43,0,0,201,202,5,61,0,0,202,46,1,
		0,0,0,203,204,5,45,0,0,204,205,5,61,0,0,205,48,1,0,0,0,206,207,5,42,0,
		0,207,208,5,61,0,0,208,50,1,0,0,0,209,210,5,47,0,0,210,211,5,61,0,0,211,
		52,1,0,0,0,212,213,5,94,0,0,213,214,5,61,0,0,214,54,1,0,0,0,215,216,5,
		37,0,0,216,217,5,61,0,0,217,56,1,0,0,0,218,219,5,43,0,0,219,220,5,43,0,
		0,220,58,1,0,0,0,221,222,5,45,0,0,222,223,5,45,0,0,223,60,1,0,0,0,224,
		225,5,43,0,0,225,62,1,0,0,0,226,227,5,45,0,0,227,64,1,0,0,0,228,229,5,
		47,0,0,229,66,1,0,0,0,230,231,5,37,0,0,231,68,1,0,0,0,232,233,5,32,0,0,
		233,234,5,42,0,0,234,235,5,32,0,0,235,70,1,0,0,0,236,237,5,32,0,0,237,
		238,5,42,0,0,238,72,1,0,0,0,239,240,5,42,0,0,240,241,5,32,0,0,241,74,1,
		0,0,0,242,243,5,42,0,0,243,76,1,0,0,0,244,245,5,92,0,0,245,78,1,0,0,0,
		246,247,5,94,0,0,247,80,1,0,0,0,248,249,5,63,0,0,249,82,1,0,0,0,250,251,
		5,95,0,0,251,84,1,0,0,0,252,253,5,58,0,0,253,86,1,0,0,0,254,255,5,59,0,
		0,255,88,1,0,0,0,256,257,5,58,0,0,257,258,5,58,0,0,258,90,1,0,0,0,259,
		260,5,59,0,0,260,261,5,59,0,0,261,92,1,0,0,0,262,263,5,45,0,0,263,264,
		5,62,0,0,264,94,1,0,0,0,265,266,5,35,0,0,266,96,1,0,0,0,267,268,5,116,
		0,0,268,269,5,114,0,0,269,270,5,117,0,0,270,271,5,101,0,0,271,98,1,0,0,
		0,272,273,5,102,0,0,273,274,5,97,0,0,274,275,5,108,0,0,275,276,5,115,0,
		0,276,277,5,101,0,0,277,100,1,0,0,0,278,279,5,110,0,0,279,280,5,117,0,
		0,280,281,5,108,0,0,281,282,5,108,0,0,282,102,1,0,0,0,283,284,5,116,0,
		0,284,285,5,114,0,0,285,286,5,121,0,0,286,104,1,0,0,0,287,288,5,99,0,0,
		288,289,5,97,0,0,289,290,5,116,0,0,290,291,5,99,0,0,291,292,5,104,0,0,
		292,106,1,0,0,0,293,294,5,102,0,0,294,295,5,105,0,0,295,296,5,110,0,0,
		296,297,5,97,0,0,297,298,5,108,0,0,298,299,5,108,0,0,299,300,5,121,0,0,
		300,108,1,0,0,0,301,302,5,105,0,0,302,303,5,102,0,0,303,110,1,0,0,0,304,
		305,5,101,0,0,305,306,5,108,0,0,306,307,5,115,0,0,307,308,5,101,0,0,308,
		112,1,0,0,0,309,310,5,101,0,0,310,311,5,108,0,0,311,312,5,115,0,0,312,
		313,5,101,0,0,313,314,5,32,0,0,314,315,5,105,0,0,315,316,5,102,0,0,316,
		114,1,0,0,0,317,318,5,119,0,0,318,319,5,104,0,0,319,320,5,105,0,0,320,
		321,5,108,0,0,321,322,5,101,0,0,322,116,1,0,0,0,323,324,5,102,0,0,324,
		325,5,111,0,0,325,326,5,114,0,0,326,118,1,0,0,0,327,328,5,114,0,0,328,
		329,5,101,0,0,329,330,5,116,0,0,330,331,5,117,0,0,331,332,5,114,0,0,332,
		333,5,110,0,0,333,120,1,0,0,0,334,335,5,98,0,0,335,336,5,114,0,0,336,337,
		5,101,0,0,337,338,5,97,0,0,338,339,5,107,0,0,339,122,1,0,0,0,340,341,5,
		99,0,0,341,342,5,111,0,0,342,343,5,110,0,0,343,344,5,116,0,0,344,345,5,
		105,0,0,345,346,5,110,0,0,346,347,5,117,0,0,347,348,5,101,0,0,348,124,
		1,0,0,0,349,350,5,121,0,0,350,351,5,105,0,0,351,352,5,101,0,0,352,353,
		5,108,0,0,353,354,5,100,0,0,354,126,1,0,0,0,355,356,5,99,0,0,356,357,5,
		108,0,0,357,358,5,97,0,0,358,359,5,115,0,0,359,360,5,115,0,0,360,128,1,
		0,0,0,361,362,5,115,0,0,362,363,5,116,0,0,363,364,5,114,0,0,364,365,5,
		117,0,0,365,366,5,99,0,0,366,367,5,116,0,0,367,130,1,0,0,0,368,369,5,108,
		0,0,369,370,5,101,0,0,370,371,5,116,0,0,371,132,1,0,0,0,372,376,7,0,0,
		0,373,375,7,1,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,
		377,1,0,0,0,377,134,1,0,0,0,378,376,1,0,0,0,379,381,5,45,0,0,380,379,1,
		0,0,0,380,381,1,0,0,0,381,404,1,0,0,0,382,384,7,2,0,0,383,382,1,0,0,0,
		384,385,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,405,1,0,0,0,387,389,
		7,2,0,0,388,387,1,0,0,0,389,390,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,
		0,391,392,1,0,0,0,392,394,5,46,0,0,393,395,7,2,0,0,394,393,1,0,0,0,395,
		396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,405,1,0,0,0,398,400,5,
		46,0,0,399,401,7,2,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,
		402,403,1,0,0,0,403,405,1,0,0,0,404,383,1,0,0,0,404,388,1,0,0,0,404,398,
		1,0,0,0,405,136,1,0,0,0,406,408,7,3,0,0,407,406,1,0,0,0,408,409,1,0,0,
		0,409,407,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,6,68,0,0,412,
		138,1,0,0,0,413,417,5,35,0,0,414,416,9,0,0,0,415,414,1,0,0,0,416,419,1,
		0,0,0,417,418,1,0,0,0,417,415,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,
		420,421,7,4,0,0,421,422,1,0,0,0,422,423,6,69,0,0,423,140,1,0,0,0,424,428,
		5,39,0,0,425,427,3,143,71,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,
		0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,432,5,39,0,0,
		432,142,1,0,0,0,433,437,3,145,72,0,434,435,5,92,0,0,435,437,9,0,0,0,436,
		433,1,0,0,0,436,434,1,0,0,0,437,144,1,0,0,0,438,439,8,5,0,0,439,146,1,
		0,0,0,13,0,175,376,380,385,390,396,402,404,409,417,428,436,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
